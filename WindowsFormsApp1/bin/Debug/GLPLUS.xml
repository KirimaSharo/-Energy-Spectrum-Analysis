<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GLPLUS</name>
    </assembly>
    <members>
        <member name="M:OpenGL.GL.glAccum(System.UInt32,System.Single)">
            <summary>
            operate on the accumulation buffer.
            </summary>
            <param name="op">
            Specifies the accumulation buffer operation. 
            Symbolic constants GL_ACCUM, GL_LOAD, GL_ADD, GL_MULT, and GL_RETURN are accepted.
            </param>
            <param name="value">
            Specifies a floating-point value used in the accumulation buffer operation. 
            op determines how value is used. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glAlphaFunc(System.UInt32,System.Single)">
            <summary>
             specify the alpha test function.
            </summary>
            <param name="func">
            Specifies the alpha comparison function. 
            Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, 
            GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. 
            The initial value is GL_ALWAYS.
            </param>
            <param name="REF">
            Specifies the reference value that incoming alpha values are compared to. 
            This value is clamped to the range [0,1], 
            where 0 represents the lowest possible alpha value and 1 the highest possible value. 
            The initial reference value is 0.
            </param>
        </member>
        <member name="M:OpenGL.GL.glAreTexturesResident(System.Int32,System.UInt32[],System.Boolean[])">
            <summary>
            determine if textures are loaded in texture memory.
            </summary>
            <param name="n">
            Specifies the number of textures to be queried.
            </param>
            <param name="textures">
            Specifies an array containing the names of the textures to be queried.
            </param>
            <param name="residences">
            Specifies an array in which the texture residence status is returned. 
            The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glArrayElement(System.Int32)">
            <summary>
            render a vertex using the specified vertex array element.
            </summary>
            <param name="i">
            Specifies an index into the enabled vertex data arrays. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBegin(System.UInt32)">
            <summary>
            delimit the vertices of a primitive or a group of like primitives.
            </summary>
            <param name="mode">
            Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd.
            Ten symbolic constants are accepted: 
            GL_POINTS, GL_LINES, GL_LINE_STRIP, GL_LINE_LOOP, GL_TRIANGLES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_QUADS, GL_QUAD_STRIP, and GL_POLYGON.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindTexture(System.UInt32,System.UInt32)">
            <summary>
            bind a named texture to a texturing target.
            </summary>
            <param name="target">
            Specifies the target to which the texture is bound. 
            Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
            </param>
            <param name="texture">
            Specifies the name of a texture. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBitmap(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
            <summary>
            draw a bitmap.
            </summary>
            <param name="width">
            Specify the pixel width of the bitmap image. 
            </param>
            <param name="height">
            Specify the pixel height of the bitmap image. 
            </param>
            <param name="xorig">
            Specify the location of the origin in the bitmap image.
            The origin is measured from the lower left corner of the bitmap,
            with right and up being the positive axes. 
            </param>
            <param name="yorig">
            Specify the location of the origin in the bitmap image. 
            The origin is measured from the lower left corner of the bitmap, 
            with right and up being the positive axes. 
            </param>
            <param name="xmove">
            Specify the x offsets to be added to the current raster position after the bitmap is drawn.
            </param>
            <param name="ymove">
            Specify the y offsets to be added to the current raster position after the bitmap is drawn.
            </param>
            <param name="bitmap">
            Specifies the array of the bitmap image.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendFunc(System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic.
            </summary>
            <param name="sfactor">
            Specifies how the red, green, blue, and alpha source blending factors are computed.
            The following symbolic constants are accepted:
            GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR
            , GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR,
            GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE.
            The initial value is GL_ONE. 
            </param>
            <param name="dfactor">
            Specifies how the red, green, blue, and alpha destination blending factors are computed.
            The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR,
            GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA.
            GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA.
            The initial value is GL_ZERO. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCallList(System.UInt32)">
            <summary>
            execute a display list.
            </summary>
            <param name="list">
            Specifies the integer name of the display list to be executed.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCallLists(System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            execute a list of display lists.
            </summary>
            <param name="n">
            Specifies the number of display lists to be executed.
            </param>
            <param name="type">
            Specifies the type of values in lists. 
            Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT,
            GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted. 
            </param>
            <param name="lists">
            Specifies the address of an array of name offsets in the display list. 
            The pointer type is void because the offsets can be bytes, shorts, ints, or floats, 
            depending on the value of type. 
            pleae using the function GLAX.GetArrayPointer to get array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glClear(System.UInt32)">
            <summary>
            clear buffers to preset values.
            </summary>
            <param name="mask">
            Bitwise OR of masks that indicate the buffers to be cleared.
            The four masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_ACCUM_BUFFER_BIT,
            and GL_STENCIL_BUFFER_BIT. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearAccum(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify clear values for the accumulation buffer.
            </summary>
            <param name="red">
            Specify the red value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
            <param name="green">
            Specify the green value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
            <param name="blue">
            Specify the blue value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
            <param name="alpha">
            Specify the  alpha value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify clear values for the color buffers.
            </summary>
            <param name="red">
            Specify the red value used when the color buffers are cleared. The initial value is 0. 
            </param>
            <param name="green">
            Specify the green value used when the color buffers are cleared. The initial value is 0. 
            </param>
            <param name="blue">
            Specify the  blue value used when the color buffers are cleared. The initial value is 0. 
            </param>
            <param name="alpha">
            Specify the  alpha value used when the color buffers are cleared. The initial value is 0. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearDepth(System.Double)">
            <summary>
            specify the clear value for the depth buffer.
            </summary>
            <param name="depth">
            Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearIndex(System.Single)">
            <summary>
            specify the clear value for the color index buffers.
            </summary>
            <param name="c">
            Specifies the index used when the color index buffers are cleared. The initial value is 0. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearStencil(System.Int32)">
            <summary>
            specify the clear value for the stencil buffer.
            </summary>
            <param name="s">
            Specifies the index used when the stencil buffer is cleared. The initial value is 0. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClipPlane(System.UInt32,System.Double[])">
            <summary>
            specify a plane against which all geometry is clipped.
            </summary>
            <param name="plane">
            Specifies which clipping plane is being positioned. 
            Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES-1, are accepted. 
            </param>
            <param name="equation">
            Specifies an array of four double-precision floating-point values. 
            These values are interpreted as a plane equation.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red  value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.SByte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Double,System.Double,System.Double)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Double[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Single,System.Single,System.Single)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Single[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Int32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Int16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Byte,System.Byte,System.Byte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.Byte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.UInt32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor3(System.UInt16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.SByte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Double[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Single[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Int32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Int16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.Byte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.UInt32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.
            </param>
        </member>
        <member name="M:OpenGL.GL.glColor4(System.UInt16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorMask(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             enable and disable writing of frame buffer color components.
            </summary>
            <param name="red">
            Specify whether red can or cannot be written into the frame buffer. The initial value is  GL_TRUE, 
            indicating that the color component can be written. 
            </param>
            <param name="green">
             Specify whether green can or cannot be written into the frame buffer. The initial value is  GL_TRUE, 
            indicating that the color component can be written. 
            </param>
            <param name="blue">
            Specify whether blue can or cannot be written into the frame buffer. The initial value is  GL_TRUE, 
            indicating that the color component can be written. 
            </param>
            <param name="alpha">
            Specify whether alpha can or cannot be written into the frame buffer. The initial value is  GL_TRUE, 
            indicating that the color component can be written. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorMaterial(System.UInt32,System.UInt32)">
            <summary>
            cause a material color to track the current color.
            </summary>
            <param name="face">
            Specifies whether front, back, or both front and back material parameters should track the current color.
            Accepted values are GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. 
            The initial value is GL_FRONT_AND_BACK. 
            </param>
            <param name="mode">
            Specifies which of several material parameters track the current color. 
            Accepted values are GL_EMISSION, GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, and GL_AMBIENT_AND_DIFFUSE.
            The initial value is GL_AMBIENT_AND_DIFFUSE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of colors.
            </summary>
            <param name="size">
            Specifies the number of components per color. Must be 3 or 4. The initial value is 4. 
            </param>
            <param name="type">
            Specifies the data type of each color component in the array. 
            Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, 
            GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT. 
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive colors. 
            If stride is 0, the colors are understood to be tightly packed in the array.
            The initial value is 0. 
            </param>
            <param name="pointer">
            Specifies a pointer to the first component of the first color element in the array.
            The initial value is 0. 
            please using the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            copy pixels in the frame buffer.
            </summary>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="width">
            Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative. 
            </param>
            <param name="height">
            Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative. 
            </param>
            <param name="type">
            Specifies whether color values, depth values, or stencil values are to be copied. 
            Symbolic constants GL_COLOR, GL_DEPTH, and GL_STENCIL are accepted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTexImage1D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy pixels into a 1D texture image.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the nth mipmap reduction image. 
            </param>
            <param name="internalFormat">
            Specifies the internal format of the texture.
            Must be one of the following symbolic constants: 
            GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA,
            GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, 
            GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, 
            GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8,
            GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, 
            GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, 
            GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2,
            GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, 
            GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, 
            GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. 
            </param>
            <param name="x">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="width">
            Specifies the width of the texture image. Must be 0 or 2^n+2﻿(border) for some integer n. 
            The height of the texture image is 1. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy pixels into a 2D texture image.
            </summary>
            <param name="target">
            Specifies the target texture. 
            Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
            GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 
            or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the nth mipmap reduction image. 
            </param>
            <param name="internalFormat">
            Specifies the internal format of the texture. 
            Must be one of the following symbolic constants: 
            GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, 
            GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, 
            GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16,
            GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, 
            GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2,
            GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16,
            GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, 
            GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, 
            GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA,
            GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. 
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture image. Must be 0 or 2^n+2﻿(border) for some integer n. 
            </param>
            <param name="height">
            Specifies the height of the texture image. Must be 0 or 2^m+2﻿(border) for some integer m. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a one-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies the texel offset within the texture array. 
            </param>
            <param name="x">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a two-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. 
            Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
            GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
            or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCullFace(System.UInt32)">
            <summary>
            specify whether front- or back-facing facets can be culled.
            </summary>
            <param name="mode">
            Specifies whether front- or back-facing facets are candidates for culling. 
            Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. 
            The initial value is GL_BACK. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteLists(System.UInt32,System.Int32)">
            <summary>
            delete a contiguous group of display lists.
            </summary>
            <param name="list">
            Specifies the integer name of the first display list to delete. 
            </param>
            <param name="range">
            Specifies the number of display lists to delete. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteTextures(System.Int32,System.UInt32[])">
            <summary>
            delete named textures.
            </summary>
            <param name="n">
            Specifies the number of textures to be deleted.
            </param>
            <param name="textures">
            Specifies an array of textures to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDepthFunc(System.UInt32)">
            <summary>
            specify the value used for depth buffer comparisons.
            </summary>
            <param name="func">
            Specifies the depth comparison function. 
            Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, 
            and GL_ALWAYS are accepted. The initial value is GL_LESS. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDepthMask(System.Boolean)">
            <summary>
            enable or disable writing into the depth buffer.
            </summary>
            <param name="flag">
            Specifies whether the depth buffer is enabled for writing. 
            If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled.
            Initially, depth buffer writing is enabled. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDepthRange(System.Double,System.Double)">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates.
            </summary>
            <param name="zNear">
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. 
            </param>
            <param name="zFar">
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDisable(System.UInt32)">
            <summary>
            disable server-side GL capabilities.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDisableClientState(System.UInt32)">
            <summary>
            disable client-side capability.
            </summary>
            <param name="array">
            Specifies the capability to disable.
            Symbolic constants GL_COLOR_ARRAY, GL_EDGE_FLAG_ARRAY, GL_FOG_COORD_ARRAY, GL_INDEX_ARRAY,
            GL_NORMAL_ARRAY, GL_SECONDARY_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY, and GL_VERTEX_ARRAY are accepted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawArrays(System.UInt32,System.Int32,System.Int32)">
            <summary>
            render primitives from array data.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted
            </param>
            <param name="first">
            Specifies the starting index in the enabled arrays. 
            </param>
            <param name="count">
            Specifies the number of indices to be rendered. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawBuffer(System.UInt32)">
            <summary>
            specify which color buffers are to be drawn into.
            </summary>
            <param name="mode">
            Specifies up to four color buffers to be drawn into.
            Symbolic constants GL_NONE, GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, 
            GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, GL_FRONT_AND_BACK, 
            and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1, are accepted.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawElements(System.UInt32,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            render primitives from array data.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES,
            GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered.
            </param>
            <param name="type">
            Specifies the type of the values in indices.
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            please using the function GLAX.GetArrayPointer to get array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawPixels(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            write a block of pixels to the frame buffer.
            </summary>
            <param name="width">
            Specify the dimensions of the pixel rectangle to be written into the frame buffer. 
            </param>
            <param name="height">
            Specify the dimensions of the pixel rectangle to be written into the frame buffer. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT,
            GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, 
            and GL_LUMINANCE_ALPHA are accepted.
            </param>
            <param name="type">
            Specifies the data type for data. 
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,
            GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="pixels">
            Specifies a pointer to the pixel data. 
             please using the function GLAX.GetArrayPointer to get array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glEdgeFlag(System.Boolean)">
            <summary>
            flag edges as either boundary or nonboundary.
            </summary>
            <param name="flag">
            Specifies the current edge flag value, either GL_TRUE or GL_FALSE. The initial value is GL_TRUE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEdgeFlagPointer(System.Int32,System.IntPtr)">
            <summary>
            define an array of edge flags.
            </summary>
            <param name="stride">
            Specifies the byte offset between consecutive edge flags. 
            If stride is 0, the edge flags are understood to be tightly packed in the array. 
            The initial value is 0. 
            </param>
            <param name="pointer">
            Specifies a pointer to the first edge flag in the bool array. The initial value is 0.
            you can use the function GLAX.GetArrayPointer to get the bool array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glEdgeFlag(System.Boolean[])">
            <summary>
            flag edges as either boundary or nonboundary.
            </summary>
            <param name="flag">
            Specifies an array that contains a single boolean element, which replaces the current edge flag value. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEnable(System.UInt32)">
            <summary>
            enable server-side GL capabilities
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEnableClientState(System.UInt32)">
            <summary>
            enable  client-side capability
            </summary>
            <param name="array">
            Specifies the capability to enable. 
            Symbolic constants GL_COLOR_ARRAY, GL_EDGE_FLAG_ARRAY, GL_FOG_COORD_ARRAY, GL_INDEX_ARRAY, 
            GL_NORMAL_ARRAY, GL_SECONDARY_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY, and GL_VERTEX_ARRAY are accepted.
            </param>
        </member>
        <member name="M:OpenGL.GL.glEnd">
            <summary>
            delimit the vertices of a primitive or a group of like primitives.
            </summary>
        </member>
        <member name="M:OpenGL.GL.glEndList">
            <summary>
            create or replace a display list.
            </summary>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord1(System.Double)">
            <summary>
            evaluate enabled one- dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous glMap1 command. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord1(System.Double[])">
            <summary>
            evaluate enabled one-dimensional maps
            </summary>
            <param name="u">
            Specifies an array containing either one domain coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord1(System.Single)">
            <summary>
            evaluate enabled one- dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous glMap1 command. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord1(System.Single[])">
            <summary>
            evaluate enabled one-dimensional maps
            </summary>
            <param name="u">
            Specifies an array containing either one domain coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord2(System.Double,System.Double)">
            <summary>
            evaluate enabled two-dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous glMap2 command. 
            </param>
            <param name="v">
            Specifies a value that is the domain coordinate v to the basis function defined in a previous glMap2 command.
            This argument is not present in a glEvalCoord1 command. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord2(System.Double[])">
            <summary>
            evaluate enabled  two-dimensional maps.
            </summary>
            <param name="u">
            Specifies a pointer to an array containing  two domain coordinates. 
            The first coordinate is u. The second coordinate is v, which is present only in glEvalCoord2 versions. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord2(System.Single,System.Single)">
            <summary>
            evaluate enabled two-dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous glMap2 command. 
            </param>
            <param name="v">
            Specifies a value that is the domain coordinate v to the basis function defined in a previous glMap2 command.
            This argument is not present in a glEvalCoord1 command. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalCoord2(System.Single[])">
            <summary>
            evaluate enabled  two-dimensional maps.
            </summary>
            <param name="u">
            Specifies a pointer to an array containing  two domain coordinates. 
            The first coordinate is u. The second coordinate is v, which is present only in glEvalCoord2 versions. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalMesh1(System.UInt32,System.Int32,System.Int32)">
            <summary>
            compute a one-dimensional grid of points or lines
            </summary>
            <param name="mode">
            In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines.
            Symbolic constants GL_POINT and GL_LINE are accepted. 
            </param>
            <param name="i1">
            Specify the first  integer values for grid domain variable i1. 
            </param>
            <param name="i2">
            Specify the last integer values for grid domain variable i2. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalMesh2(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            compute a two-dimensional grid of points or lines
            </summary>
            <param name="mode">
            In glEvalMesh2, specifies whether to compute a two-dimensional mesh of points, lines, or polygons.
            Symbolic constants GL_POINT, GL_LINE, and GL_FILL are accepted. 
            </param>
            <param name="i1">
            Specify the first integer values for grid domain variable i.
            </param>
            <param name="i2">
            Specify the  last integer values for grid domain variable i.
            </param>
            <param name="j1">
            Specify the first integer values for grid domain variable j.
            </param>
            <param name="j2">
            Specify the last integer values for grid domain variable j.
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalPoint1(System.Int32)">
            <summary>
            generate and evaluate a single point in a mesh.
            </summary>
            <param name="i">
            Specifies the integer value for grid domain variable i. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEvalPoint2(System.Int32,System.Int32)">
            <summary>
            generate and evaluate a single point in a mesh.
            </summary>
            <param name="i">
            Specifies the integer value for grid domain variable i.
            </param>
            <param name="j">
            Specifies the integer value for grid domain variable j (glEvalPoint2 only).
            </param>
        </member>
        <member name="M:OpenGL.GL.glFeedbackBuffer(System.Int32,System.UInt32,System.Single[])">
            <summary>
            controls feedback mode.
            </summary>
            <param name="size">
            Specifies the maximum number of values that can be written into buffer.
            </param>
            <param name="type">
            Specifies a symbolic constant that describes the information that will be returned for each vertex.
            GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.
            </param>
            <param name="buffer">
            Returns the feedback data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFinish">
            <summary>
            block until all GL execution is complete.
            </summary>
        </member>
        <member name="M:OpenGL.GL.glFlush">
            <summary>
            force execution of GL commands in finite time
            </summary>
        </member>
        <member name="M:OpenGL.GL.glFog(System.UInt32,System.Single)">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            Specifies a single-valued fog parameter. 
            GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted. 
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFog(System.UInt32,System.Single[])">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            Specifies a fog parameter. 
            GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, GL_FOG_COLOR, 
            and GL_FOG_COORD_SRC are accepted. 
            </param>
            <param name="Params">
            Specifies the value or values to be assigned to pname. 
            GL_FOG_COLOR requires an array of four values.
            All other parameters accept an array containing only a single value. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFog(System.UInt32,System.Int32)">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            Specifies a single-valued fog parameter. 
            GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted. 
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFog(System.UInt32,System.Int32[])">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            Specifies a fog parameter. 
            GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, GL_FOG_COLOR, 
            and GL_FOG_COORD_SRC are accepted. 
            </param>
            <param name="Params">
            Specifies the value or values to be assigned to pname. 
            GL_FOG_COLOR requires an array of four values.
            All other parameters accept an array containing only a single value. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFrontFace(System.UInt32)">
            <summary>
            define front- and back-facing polygons.
            </summary>
            <param name="mode">
            Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted.
            The initial value is GL_CCW.
            </param>
        </member>
        <member name="M:OpenGL.GL.glFrustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix by a perspective matrix.
            </summary>
            <param name="left">
            Specify the coordinates for the left vertical clipping planes.
            </param>
            <param name="right">
            Specify the coordinates for the right vertical clipping planes.
            </param>
            <param name="bottom">
            Specify the coordinates for the bottom  horizontal clipping planes. 
            </param>
            <param name="top">
            Specify the coordinates for the top horizontal clipping planes. 
            </param>
            <param name="zNear">
            Specify the distances to the near depth clipping planes. The distance must be positive. 
            </param>
            <param name="zFar">
            Specify the distances to the far depth clipping planes. The distance must be positive. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenLists(System.Int32)">
            <summary>
            generate a contiguous set of empty display lists.
            </summary>
            <param name="range">
            Specifies the number of contiguous empty display lists to be generated. 
            </param>
            <returns>
            It returns an integer n such that range contiguous empty display lists,
            named n, n+1, ..., n+range−1, are created.
            </returns>
        </member>
        <member name="M:OpenGL.GL.glGenTextures(System.Int32,System.UInt32[])">
            <summary>
            generate texture names.
            </summary>
            <param name="n">
            Specifies the number of texture names to be generated. 
            </param>
            <param name="textures">
            Specifies an array in which the generated texture names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetBoolean(System.UInt32,System.Boolean[])">
            <summary>
            return the value or values of a selected parameter
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetClipPlane(System.UInt32,System.Double[])">
            <summary>
            return the coefficients of the specified clipping plane.
            </summary>
            <param name="plane">
            Specifies a clipping plane. 
            The number of clipping planes depends on the implementation, 
            but at least six clipping planes are supported. 
            They are identified by symbolic names of the form GL_CLIP_PLANEi where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
            </param>
            <param name="equation">
            Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. 
            The initial value is (0, 0, 0, 0). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetDouble(System.UInt32,System.Double[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetError">
            <summary>
            return error information.
            </summary>
            <returns>
            returns the value of the error flag.
            </returns>
        </member>
        <member name="M:OpenGL.GL.glGetFloat(System.UInt32,System.Single[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetInteger(System.UInt32,System.Int32[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetLight(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return light source parameter values
            </summary>
            <param name="light">
            Specifies a light source. 
            The number of possible lights depends on the implementation, but at least eight lights are supported.
            They are identified by symbolic names of the form GL_LIGHTi where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. 
            </param>
            <param name="pname">
            Specifies a light source parameter for light.
            Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, 
            GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetLight(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return light source parameter values
            </summary>
            <param name="light">
            Specifies a light source. 
            The number of possible lights depends on the implementation, but at least eight lights are supported.
            They are identified by symbolic names of the form GL_LIGHTi where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. 
            </param>
            <param name="pname">
            Specifies a light source parameter for light.
            Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, 
            GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMap(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            return evaluator parameters.
            </summary>
            <param name="target">
            Specifies the symbolic name of a map.
            Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1,
            GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, 
            GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1,
            GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, 
            and GL_MAP2_VERTEX_4.
            </param>
            <param name="query">
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted. 
            </param>
            <param name="v">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMap(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return evaluator parameters.
            </summary>
            <param name="target">
            Specifies the symbolic name of a map.
            Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1,
            GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, 
            GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1,
            GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, 
            and GL_MAP2_VERTEX_4.
            </param>
            <param name="query">
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted. 
            </param>
            <param name="v">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMap(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return evaluator parameters.
            </summary>
            <param name="target">
            Specifies the symbolic name of a map.
            Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1,
            GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, 
            GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1,
            GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, 
            and GL_MAP2_VERTEX_4.
            </param>
            <param name="query">
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted. 
            </param>
            <param name="v">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMaterial(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return material parameters.
            </summary>
            <param name="face">
            Specifies which of the two materials is being queried.
            GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively. 
            </param>
            <param name="pname">
            Specifies the material parameter to return.
            GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted. 
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMaterial(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return material parameters.
            </summary>
            <param name="face">
            Specifies which of the two materials is being queried.
            GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively. 
            </param>
            <param name="pname">
            Specifies the material parameter to return.
            GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted. 
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetPixelMap(System.UInt32,System.Single[])">
            <summary>
            return the specified pixel map.
            </summary>
            <param name="map">
            Specifies the name of the pixel map to return. 
            Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, 
            GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, 
            GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A. 
            </param>
            <param name="values">
            Returns the pixel map contents. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetPixelMap(System.UInt32,System.UInt32[])">
            <summary>
            return the specified pixel map.
            </summary>
            <param name="map">
            Specifies the name of the pixel map to return. 
            Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, 
            GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, 
            GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A. 
            </param>
            <param name="values">
            Returns the pixel map contents. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetPixelMap(System.UInt32,System.UInt16[])">
            <summary>
            return the specified pixel map.
            </summary>
            <param name="map">
            Specifies the name of the pixel map to return. 
            Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, 
            GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, 
            GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A. 
            </param>
            <param name="values">
            Returns the pixel map contents. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetPointer(System.UInt32,System.IntPtr[])">
            <summary>
            return the address of the specified pointer.
            </summary>
            <param name="pname">
            Specifies the array or buffer pointer to be returned.
            Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, 
            GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, 
            GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER,
            or GL_VERTEX_ARRAY_POINTER are accepted. 
            </param>
            <param name="Params">
            Returns the pointer value specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetPolygonStipple(System.Byte[])">
            <summary>
            return the polygon stipple pattern
            </summary>
            <param name="mask">
            Returns the stipple pattern. The initial value is all 1's. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetString(System.UInt32)">
            <summary>
            return a string describing the current GL connection.
            </summary>
            <param name="name">
            Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION,
            GL_SHADING_LANGUAGE_VERSION,or GL_EXTENSIONS. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetTexEnv(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture environment parameter.
            Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB,
            GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, 
            GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, 
            GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexEnv(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture environment parameter.
            Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB,
            GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, 
            GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, 
            GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexGen(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            return texture coordinate generation parameters.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the value(s) to be returned. 
            Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: 
            GL_OBJECT_PLANE or GL_EYE_PLANE.
            </param>
            <param name="pParams">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexGen(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture coordinate generation parameters.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the value(s) to be returned. 
            Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: 
            GL_OBJECT_PLANE or GL_EYE_PLANE.
            </param>
            <param name="pParams">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexGen(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture coordinate generation parameters.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the value(s) to be returned. 
            Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations: 
            GL_OBJECT_PLANE or GL_EYE_PLANE.
            </param>
            <param name="pParams">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            return a texture image
            </summary>
            <param name="target">
            Specifies which texture is to be obtained.
            GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, 
            GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 
            GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted. 
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. 
            Level n is the nth mipmap reduction image.
            </param>
            <param name="format">
            Specifies a pixel format for the returned data. 
            The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA,
            GL_LUMINANCE, and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Specifies a pixel type for the returned data. 
            The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, 
            GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5,
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, 
            GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Single[])">
            <summary>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </summary>
            <param name="target">
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D,
            GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, 
            GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
            GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, 
            or GL_PROXY_TEXTURE_CUBE_MAP. 
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image.
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,
            GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, 
            GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE,
            GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Int32[])">
            <summary>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </summary>
            <param name="target">
            Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D,
            GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, 
            GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
            GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, 
            or GL_PROXY_TEXTURE_CUBE_MAP. 
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image.
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,
            GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, 
            GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE,
            GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="target">
            Specifies the symbolic name of the target texture. 
            GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD,
            GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, 
            GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, 
            GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, 
            and GL_GENERATE_MIPMAP are accepted. 
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="target">
            Specifies the symbolic name of the target texture. 
            GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD,
            GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, 
            GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, 
            GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, 
            and GL_GENERATE_MIPMAP are accepted. 
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.GL.glHint(System.UInt32,System.UInt32)">
             <summary>
             specify implementation-specific hints.
             </summary>
             <param name="target">
             Specifies a symbolic constant indicating the behavior to be controlled. 
             GL_FOG_HINT, GL_GENERATE_MIPMAP_HINT, GL_LINE_SMOOTH_HINT, GL_PERSPECTIVE_CORRECTION_HINT, 
             GL_POINT_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, 
             and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted. 
             </param>
             <param name="mode">
            Specifies a symbolic constant indicating the desired behavior.
            GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted. 
             </param>
        </member>
        <member name="M:OpenGL.GL.glIndexMask(System.UInt32)">
            <summary>
            control the writing of individual bits in the color index buffers
            </summary>
            <param name="mask">
            Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers.
            Initially, the mask is all 1's. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndexPointer(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of color indexes.
            </summary>
            <param name="type">
            Specifies the data type of each color index in the array. 
            Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted.
            The initial value is GL_FLOAT. 
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive color indexes. 
            If stride is 0, the color indexes are understood to be tightly packed in the array. 
            The initial value is 0. 
            </param>
            <param name="pointer">
            Specifies a pointer to the first index in the array. The initial value is 0.
            You can use the function GLAX.GetArrayPonter Tto get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Double)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Double[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a  one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Single)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Single[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Int32)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Int32[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Int16)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Int16[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Byte)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIndex(System.Byte[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.GL.glInitNames">
            <summary>
            initialize the name stack.
            </summary>
        </member>
        <member name="M:OpenGL.GL.glInterleavedArrays(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            simultaneously specify and enable several interleaved arrays
            </summary>
            <param name="format">
            Specifies the type of array to enable.
            Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, 
            GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, 
            GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted. 
            </param>
            <param name="stride">
            Specifies the offset in bytes between each aggregate array element.
            </param>
            <param name="pointer">
            specifies a pointer of an array that contains colors, normals, textures and vertexs.
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsEnabled(System.UInt32)">
            <summary>
            test whether a capability is enabled
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability. 
            </param>
            <returns>
            returns GL_TRUE if cap is an enabled capability and returns GL_FALSE otherwise.
            </returns>
        </member>
        <member name="M:OpenGL.GL.glIsList(System.UInt32)">
            <summary>
            determine if a name corresponds to a display list
            </summary>
            <param name="list">
            Specifies a potential display list name. 
            </param>
            <returns>
            returns GL_TRUE if list is the name of a display list and returns GL_FALSE if it is not, 
            or if an error occurs.
            </returns>
        </member>
        <member name="M:OpenGL.GL.glIsTexture(System.UInt32)">
            <summary>
            determine if a name corresponds to a texture
            </summary>
            <param name="texture">
            Specifies a value that may be the name of a texture.
            </param>
            <returns>
            returns GL_TRUE if texture is currently the name of a texture.
            </returns>
        </member>
        <member name="M:OpenGL.GL.glLightModel(System.UInt32,System.Single)">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            Specifies a single-valued lighting model parameter.
            GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted. 
            </param>
            <param name="param">
            Specifies the value that param will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLightModel(System.UInt32,System.Single[])">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            Specifies a lighting model parameter. 
            GL_LIGHT_MODEL_AMBIENT, GL_LIGHT_MODEL_COLOR_CONTROL, GL_LIGHT_MODEL_LOCAL_VIEWER, and GL_LIGHT_MODEL_TWO_SIDE are accepted. 
            </param>
            <param name="Params">
            Specifies an array of the value or values that params will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLightModel(System.UInt32,System.Int32)">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            Specifies a single-valued lighting model parameter.
            GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted. 
            </param>
            <param name="param">
            Specifies the value that param will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLightModel(System.UInt32,System.Int32[])">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            Specifies a lighting model parameter. 
            GL_LIGHT_MODEL_AMBIENT, GL_LIGHT_MODEL_COLOR_CONTROL, GL_LIGHT_MODEL_LOCAL_VIEWER, and GL_LIGHT_MODEL_TWO_SIDE are accepted. 
            </param>
            <param name="Params">
            Specifies an array of the value or values that params will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLight(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set light source parameters.
            </summary>
            <param name="light">
            Specifies a light. 
            The number of lights depends on the implementation, but at least eight lights are supported. 
            They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. 
            </param>
            <param name="pname">
            Specifies a single-valued light source parameter for light. 
            GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </param>
            <param name="param">
            Specifies the value that parameter pname of light source light will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLight(System.UInt32,System.UInt32,System.Single[])">
            <summary>
             set light source parameters.
            </summary>
            <param name="light">
            Specifies a light. 
            The number of lights depends on the implementation, but at least eight lights are supported. 
            They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. 
            </param>
            <param name="pname">
            Specifies a light source parameter for light.
            GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_CUTOFF, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT,
            GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted. 
            </param>
            <param name="Params">
            Specifies an array of the value or values that parameter pname of light source light will be set to.
            </param>
        </member>
        <member name="M:OpenGL.GL.glLight(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set light source parameters.
            </summary>
            <param name="light">
            Specifies a light. 
            The number of lights depends on the implementation, but at least eight lights are supported. 
            They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. 
            </param>
            <param name="pname">
            Specifies a single-valued light source parameter for light. 
            GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.
            </param>
            <param name="param">
            Specifies the value that parameter pname of light source light will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLight(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
             set light source parameters.
            </summary>
            <param name="light">
            Specifies a light. 
            The number of lights depends on the implementation, but at least eight lights are supported. 
            They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. 
            </param>
            <param name="pname">
            Specifies a light source parameter for light.
            GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_CUTOFF, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT,
            GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted. 
            </param>
            <param name="Params">
            Specifies an array of the value or values that parameter pname of light source light will be set to.
            </param>
        </member>
        <member name="M:OpenGL.GL.glLineStipple(System.Int32,System.UInt16)">
            <summary>
            specify the line stipple pattern.
            </summary>
            <param name="factor">
            Specifies a multiplier for each bit in the line stipple pattern. 
            If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used.
            factor is clamped to the range [1, 256] and defaults to 1. 
            </param>
            <param name="pattern">
            Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. 
            Bit zero is used first; the default pattern is all 1's. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLineWidth(System.Single)">
            <summary>
            specify the width of rasterized lines.
            </summary>
            <param name="width">
            Specifies the width of rasterized lines. The initial value is 1. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glListBase(System.UInt32)">
            <summary>
            set the display-list base for glCallLists.
            </summary>
            <param name="Base">
            Specifies an integer offset that will be added to glCallLists offsets to generate display-list names.
            The initial value is 0.
            </param>
        </member>
        <member name="M:OpenGL.GL.glLoadIdentity">
            <summary>
             replace the current matrix with the identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.GL.glLoadMatrix(System.Double[])">
            <summary>
            replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.GL.glLoadMatrix(System.Single[])">
            <summary>
            replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.GL.glLoadName(System.UInt32)">
            <summary>
            load a name onto the name stack.
            </summary>
            <param name="name">
            Specifies a name that will replace the top value on the name stack.
            </param>
        </member>
        <member name="M:OpenGL.GL.glLogicOp(System.UInt32)">
            <summary>
            specify a logical pixel operation for color index rendering.
            </summary>
            <param name="opcode">
            Specifies a symbolic constant that selects a logical operation. 
            The following symbols are accepted: GL_CLEAR, GL_SET, GL_COPY, GL_COPY_INVERTED, GL_NOOP, GL_INVERT,
            GL_AND, GL_NAND, GL_OR, GL_NOR, GL_XOR, GL_EQUIV, GL_AND_REVERSE, GL_AND_INVERTED, GL_OR_REVERSE, 
            and GL_OR_INVERTED. The initial value is GL_COPY. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMap1(System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            define a one-dimensional evaluator.
            </summary>
            <param name="target">
            Specifies the kind of values that are generated by the evaluator. 
            Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, 
            GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3,
            and GL_MAP1_TEXTURE_COORD_4 are accepted. 
            </param>
            <param name="u1">
            Specify a linear mapping of u, as presented to glEvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="u2">
            Specify a linear mapping of u, as presented to glEvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="stride">
            Specifies the number of floats  between the beginning of one control point and the beginning of the next one in the data structure referenced in points.
            This allows control points to be embedded in arbitrary data structures.
            The only constraint is that the values for a particular control point must occupy contiguous memory locations. 
            </param>
            <param name="order">
            Specifies the number of control points. Must be positive. 
            </param>
            <param name="points">
            Specifies an array of the array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMap1(System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            define a one-dimensional evaluator.
            </summary>
            <param name="target">
            Specifies the kind of values that are generated by the evaluator. 
            Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, 
            GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3,
            and GL_MAP1_TEXTURE_COORD_4 are accepted. 
            </param>
            <param name="u1">
            Specify a linear mapping of u, as presented to glEvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="u2">
            Specify a linear mapping of u, as presented to glEvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="stride">
            Specifies the number of double  between the beginning of one control point and the beginning of the next one in the data structure referenced in points.
            This allows control points to be embedded in arbitrary data structures.
            The only constraint is that the values for a particular control point must occupy contiguous memory locations. 
            </param>
            <param name="order">
            Specifies the number of control points. Must be positive. 
            </param>
            <param name="points">
            Specifies an array of the array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMap2(System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            define a two-dimensional evaluator.
            </summary>
            <param name="target">
            Specifies the kind of values that are generated by the evaluator.
            Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL,
            GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, 
            and GL_MAP2_TEXTURE_COORD_4 are accepted. 
            </param>
            <param name="u1">
            Specify a linear mapping of u, as presented to glEvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command. 
            Initially, u1 is 0 and u2 is 1. 
            </param>
            <param name="u2">
            Specify a linear mapping of u, as presented to glEvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command.
            Initially, u1 is 0 and u2 is 1. 
            </param>
            <param name="ustride">
            Specifies the number of doubles  between the beginning of control point R(i,j) 
            and the beginning of control point R(i+1﻿,j), where i and j are the u and v control point indices,respectively.
            This allows control points to be embedded in arbitrary data structures. 
            The only constraint is that the values for a particular control point must occupy contiguous memory locations. 
            The initial value of ustride is 0. 
            </param>
            <param name="uorder">
            Specifies the dimension of the control point array in the u axis. Must be positive. The initial value is 1. 
            </param>
            <param name="v1">
            Specify a linear mapping of v, as presented to glEvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.
            Initially, v1 is 0 and v2 is 1.
            </param>
            <param name="v2">
            Specify a linear mapping of v, as presented to glEvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.
            Initially, v1 is 0 and v2 is 1.
            </param>
            <param name="vstride">
            Specifies the number of doubles  between the beginning of control point R(i,j) and the beginning of control point R(i,﻿j+1), 
            where i and j are the u and v control point indices, respectively.
            This allows control points to be embedded in arbitrary data structures. 
            The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            The initial value of vstride is 0.
            </param>
            <param name="vorder">
            Specifies the dimension of the control point array in the v axis. Must be positive. The initial value is 1. 
            </param>
            <param name="points">
            Specifies an array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMap2(System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            define a two-dimensional evaluator.
            </summary>
            <param name="target">
            Specifies the kind of values that are generated by the evaluator.
            Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL,
            GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, 
            and GL_MAP2_TEXTURE_COORD_4 are accepted. 
            </param>
            <param name="u1">
            Specify a linear mapping of u, as presented to glEvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command. 
            Initially, u1 is 0 and u2 is 1. 
            </param>
            <param name="u2">
            Specify a linear mapping of u, as presented to glEvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command.
            Initially, u1 is 0 and u2 is 1. 
            </param>
            <param name="ustride">
            Specifies the number of floats  between the beginning of control point R(i,j) 
            and the beginning of control point R(i+1﻿,j), where i and j are the u and v control point indices,respectively.
            This allows control points to be embedded in arbitrary data structures. 
            The only constraint is that the values for a particular control point must occupy contiguous memory locations. 
            The initial value of ustride is 0. 
            </param>
            <param name="uorder">
            Specifies the dimension of the control point array in the u axis. Must be positive. The initial value is 1. 
            </param>
            <param name="v1">
            Specify a linear mapping of v, as presented to glEvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.
            Initially, v1 is 0 and v2 is 1.
            </param>
            <param name="v2">
            Specify a linear mapping of v, as presented to glEvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.
            Initially, v1 is 0 and v2 is 1.
            </param>
            <param name="vstride">
            Specifies the number of floats  between the beginning of control point R(i,j) and the beginning of control point R(i,﻿j+1), 
            where i and j are the u and v control point indices, respectively.
            This allows control points to be embedded in arbitrary data structures. 
            The only constraint is that the values for a particular control point must occupy contiguous memory locations.
            The initial value of vstride is 0.
            </param>
            <param name="vorder">
            Specifies the dimension of the control point array in the v axis. Must be positive. The initial value is 1. 
            </param>
            <param name="points">
            Specifies an array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMapGrid1(System.Int32,System.Double,System.Double)">
            <summary>
            define a one dimensional mesh.
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMapGrid1(System.Int32,System.Single,System.Single)">
            <summary>
            define a one dimensional mesh.
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMapGrid2(System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            define a two-dimensional mesh
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="vn">
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only). 
            </param>
            <param name="v1">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
            <param name="v2">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMapGrid2(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            define a two-dimensional mesh
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="vn">
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only). 
            </param>
            <param name="v1">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
            <param name="v2">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMaterial(System.UInt32,System.UInt32,System.Single)">
            <summary>
            specify material parameters for the lighting model.
            </summary>
            <param name="face">
            Specifies which face or faces are being updated.
            Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK. 
            </param>
            <param name="pname">
            Specifies the single-valued material parameter of the face or faces that is being updated.
            Must be GL_SHININESS. 
            </param>
            <param name="param">
            Specifies the value that parameter GL_SHININESS will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMaterial(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            specify material parameters for the lighting model
            </summary>
            <param name="face">
            Specifies which face or faces are being updated.
            Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </param>
            <param name="pname">
            Specifies the material parameter of the face or faces that is being updated.
            Must be one of GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, GL_AMBIENT_AND_DIFFUSE, or GL_COLOR_INDEXES. 
            </param>
            <param name="Params">
            Specifies an array of the value or values that pname will be set to.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMaterial(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            specify material parameters for the lighting model.
            </summary>
            <param name="face">
            Specifies which face or faces are being updated.
            Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK. 
            </param>
            <param name="pname">
            Specifies the single-valued material parameter of the face or faces that is being updated.
            Must be GL_SHININESS. 
            </param>
            <param name="param">
            Specifies the value that parameter GL_SHININESS will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMaterial(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            specify material parameters for the lighting model
            </summary>
            <param name="face">
            Specifies which face or faces are being updated.
            Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.
            </param>
            <param name="pname">
            Specifies the material parameter of the face or faces that is being updated.
            Must be one of GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, GL_AMBIENT_AND_DIFFUSE, or GL_COLOR_INDEXES. 
            </param>
            <param name="Params">
            Specifies an array of the value or values that pname will be set to.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMatrixMode(System.UInt32)">
            <summary>
            specify which matrix is the current matrix.
            </summary>
            <param name="mode">
            Specifies which matrix stack is the target for subsequent matrix operations. 
            Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. 
            The initial value is GL_MODELVIEW. 
            Additionally, if the ARB_imaging extension is supported, GL_COLOR is also accepted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultMatrix(System.Double[])">
            <summary>
            multiply the current matrix with the specified matrix.
            </summary>
            <param name="m">
            Array of 16 consecutive values that are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultMatrix(System.Single[])">
            <summary>
            multiply the current matrix with the specified matrix.
            </summary>
            <param name="m">
            Array of 16 consecutive values that are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.GL.glNewList(System.UInt32,System.UInt32)">
            <summary>
            create or replace a display list.
            </summary>
            <param name="list">
            Specifies the display-list name.
            </param>
            <param name="mode">
            Specifies the compilation mode, which can be GL_COMPILE or GL_COMPILE_AND_EXECUTE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            Specify the x coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="ny">
            Specify the y coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="nz">
            Specify the z coordinates of the new current normal.
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.SByte[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Double,System.Double,System.Double)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            Specify the x coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="ny">
            Specify the y coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="nz">
            Specify the z coordinates of the new current normal.
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Double[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Single,System.Single,System.Single)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            Specify the x coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="ny">
            Specify the y coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="nz">
            Specify the z coordinates of the new current normal.
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Single[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            Specify the x coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="ny">
            Specify the y coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="nz">
            Specify the z coordinates of the new current normal.
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Int32[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            Specify the x coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="ny">
            Specify the y coordinates of the new current normal. 
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
            <param name="nz">
            Specify the z coordinates of the new current normal.
            The initial value of the current normal is the unit vector, (0, 0, 1). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormal3(System.Int16[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNormalPointer(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of normals.
            </summary>
            <param name="type">
            Specifies the data type of each coordinate in the array. 
            Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. 
            The initial value is GL_FLOAT. 
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive normals. 
            If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0. 
            </param>
            <param name="pointer">
            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0. 
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glOrtho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix with an orthographic matrix.
            </summary>
            <param name="left">
            Specify the coordinates for the left vertical clipping planes. 
            </param>
            <param name="right">
            Specify the coordinates for the right vertical clipping planes. 
            </param>
            <param name="bottom">
            Specify the coordinates for the bottom  horizontal clipping planes.
            </param>
            <param name="top">
            Specify the coordinates for the  top horizontal clipping planes.
            </param>
            <param name="zNear">
            Specify the distances to the nearer  depth clipping planes.
            This value is negative if the plane is to be behind the viewer. 
            </param>
            <param name="zFar">
            Specify the distances to the  farther depth clipping planes. 
            This value is negative if the plane is to be behind the viewer. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPassThrough(System.Single)">
            <summary>
            place a marker in the feedback buffer.
            </summary>
            <param name="token">
            Specifies a marker value to be placed in the feedback buffer following a GL_PASS_THROUGH_TOKEN.
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelMap(System.UInt32,System.Int32,System.Single[])">
            <summary>
            set up pixel transfer maps.
            </summary>
            <param name="map">
            Specifies a symbolic map name.
            Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R,
            GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R,
            GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A. 
            </param>
            <param name="mapsize">
            Specifies the size of the map being defined. 
            </param>
            <param name="values">
            Specifies an array of mapsize values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelMap(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            set up pixel transfer maps.
            </summary>
            <param name="map">
            Specifies a symbolic map name.
            Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R,
            GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R,
            GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A. 
            </param>
            <param name="mapsize">
            Specifies the size of the map being defined. 
            </param>
            <param name="values">
            Specifies an array of mapsize values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelMap(System.UInt32,System.Int32,System.UInt16[])">
            <summary>
            set up pixel transfer maps.
            </summary>
            <param name="map">
            Specifies a symbolic map name.
            Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R,
            GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R,
            GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A. 
            </param>
            <param name="mapsize">
            Specifies the size of the map being defined. 
            </param>
            <param name="values">
            Specifies an array of mapsize values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelStore(System.UInt32,System.Single)">
            <summary>
            set pixel storage modes.
            </summary>
            <param name="pname">
            Specifies the symbolic name of the parameter to be set. 
            Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST,
            GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES,
            and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES,
            GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS,
            GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT. 
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelStore(System.UInt32,System.Int32)">
            <summary>
            set pixel storage modes.
            </summary>
            <param name="pname">
            Specifies the symbolic name of the parameter to be set. 
            Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST,
            GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES,
            and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES,
            GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS,
            GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT. 
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelTransfer(System.UInt32,System.Single)">
            <summary>
            set pixel transfer modes.
            </summary>
            <param name="pname">
            Specifies the symbolic name of the pixel transfer parameter to be set.
            Must be one of the following: GL_MAP_COLOR, GL_MAP_STENCIL, GL_INDEX_SHIFT, GL_INDEX_OFFSET, 
            GL_RED_SCALE, GL_RED_BIAS, GL_GREEN_SCALE, GL_GREEN_BIAS, GL_BLUE_SCALE, GL_BLUE_BIAS, 
            GL_ALPHA_SCALE, GL_ALPHA_BIAS, GL_DEPTH_SCALE, or GL_DEPTH_BIAS. 
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelTransfer(System.UInt32,System.Int32)">
            <summary>
            set pixel transfer modes.
            </summary>
            <param name="pname">
            Specifies the symbolic name of the pixel transfer parameter to be set.
            Must be one of the following: GL_MAP_COLOR, GL_MAP_STENCIL, GL_INDEX_SHIFT, GL_INDEX_OFFSET, 
            GL_RED_SCALE, GL_RED_BIAS, GL_GREEN_SCALE, GL_GREEN_BIAS, GL_BLUE_SCALE, GL_BLUE_BIAS, 
            GL_ALPHA_SCALE, GL_ALPHA_BIAS, GL_DEPTH_SCALE, or GL_DEPTH_BIAS. 
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPixelZoom(System.Single,System.Single)">
            <summary>
            specify the pixel zoom factors.
            </summary>
            <param name="xfactor">
            Specify the x  zoom factors for pixel write operations. 
            </param>
            <param name="yfactor">
            Specify the  y zoom factors for pixel write operations. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPointSize(System.Single)">
            <summary>
            specify the diameter of rasterized points.
            </summary>
            <param name="size">
            Specifies the diameter of rasterized points. The initial value is 1. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPolygonMode(System.UInt32,System.UInt32)">
            <summary>
            select a polygon rasterization mode.
            </summary>
            <param name="face">
            Specifies the polygons that mode applies to.
            Must be GL_FRONT for front-facing polygons, GL_BACK for back-facing polygons, 
            or GL_FRONT_AND_BACK for front- and back-facing polygons. 
            </param>
            <param name="mode">
            Specifies how polygons will be rasterized. Accepted values are GL_POINT, GL_LINE, and GL_FILL. 
            The initial value is GL_FILL for both front- and back-facing polygons. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPolygonOffset(System.Single,System.Single)">
            <summary>
            set the scale and units used to calculate depth values.
            </summary>
            <param name="factor">
            Specifies a scale factor that is used to create a variable depth offset for each polygon. 
            The initial value is 0.
            </param>
            <param name="units">
            Is multiplied by an implementation-specific value to create a constant depth offset. 
            The initial value is 0. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPolygonStipple(System.Byte[])">
            <summary>
            set the polygon stippling pattern.
            </summary>
            <param name="mask">
            Specifies an array  of a 32×32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPopAttrib">
            <summary>
            pop the server attribute stack
            </summary>
        </member>
        <member name="M:OpenGL.GL.glPopClientAttrib">
            <summary>
            pop the client attribute stack
            </summary>
        </member>
        <member name="M:OpenGL.GL.glPopMatrix">
            <summary>
            pop the current matrix stack
            </summary>
        </member>
        <member name="M:OpenGL.GL.glPopName">
             <summary>
            pop the name stack
             </summary>
        </member>
        <member name="M:OpenGL.GL.glPrioritizeTextures(System.Int32,System.UInt32[],System.Single)">
            <summary>
            set texture residence priority.
            </summary>
            <param name="n">
            Specifies the number of textures to be prioritized. 
            </param>
            <param name="textures">
            Specifies an array containing the names of the textures to be prioritized. 
            </param>
            <param name="priorities">
            Specifies an array containing the texture priorities.
            A priority given in an element of priorities applies to the texture named by the corresponding element of textures. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPushAttrib(System.UInt32)">
            <summary>
            push the server attribute stack
            </summary>
            <param name="mask">
            Specifies a mask that indicates which attributes to save. Values for mask are listed below. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPushClientAttrib(System.UInt32)">
            <summary>
            push and pop the client attribute stack.
            </summary>
            <param name="mask">
            Specifies a mask that indicates which attributes to save. Values for mask are listed below. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPushMatrix">
            <summary>
            push the current matrix stack
            </summary>
        </member>
        <member name="M:OpenGL.GL.glPushName(System.UInt32)">
            <summary>
            push and pop the name stack
            </summary>
            <param name="name">
            Specifies a name that will be pushed onto the name stack. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Double,System.Double)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Double[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Single,System.Single)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Single[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Int32,System.Int32)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Int32[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Int16,System.Int16)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos2(System.Int16[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Double,System.Double,System.Double)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Double[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Single,System.Single,System.Single)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Single[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Int32[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos3(System.Int16[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Double[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Single[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Int32[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRasterPos4(System.Int16[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glReadBuffer(System.UInt32)">
            <summary>
            select a color buffer source for pixels.
            </summary>
            <param name="mode">
            Specifies a color buffer. 
            Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, 
            GL_BACK, GL_LEFT, GL_RIGHT, and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            read a block of pixels from the frame buffer.
            </summary>
            <param name="x">
            Specify the window coordinates of the first pixel that is read from the frame buffer. 
            This location is the lower left corner of a rectangular block of pixels. 
            </param>
            <param name="y">
            Specify the window coordinates of the first pixel that is read from the frame buffer.
            This location is the lower left corner of a rectangular block of pixels. 
            </param>
            <param name="width">
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel. 
            </param>
            <param name="height">
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, 
            GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, 
            GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, 
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, 
            GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Returns the pixel data. 
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Double[],System.Double[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Single[],System.Single[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Int32[],System.Int32[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRect(System.Int16[],System.Int16[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRenderMode(System.UInt32)">
            <summary>
            set rasterization mode
            </summary>
            <param name="mode">
            Specifies the rasterization mode. Three values are accepted: GL_RENDER, GL_SELECT, and GL_FEEDBACK.
            The initial value is GL_RENDER. 
            </param>
            <returns>
            The return value of glRenderMode is determined by the render mode at the time glRenderMode is called, rather than by mode. 
            </returns>
        </member>
        <member name="M:OpenGL.GL.glRotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix by a rotation matrix.
            </summary>
            <param name="angle">
            ecifies the angle of rotation, in degrees.
            </param>
            <param name="x">
            Specify the x coordinates of a vector, respectively. 
            </param>
            <param name="y">
            Specify the y coordinates of a vector, respectively. 
            </param>
            <param name="z">
            Specify the z coordinates of a vector, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glRotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            multiply the current matrix by a rotation matrix.
            </summary>
            <param name="angle">
            ecifies the angle of rotation, in degrees.
            </param>
            <param name="x">
            Specify the x coordinates of a vector, respectively. 
            </param>
            <param name="y">
            Specify the y coordinates of a vector, respectively. 
            </param>
            <param name="z">
            Specify the z coordinates of a vector, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glScale(System.Double,System.Double,System.Double)">
            <summary>
             multiply the current matrix by a general scaling matrix.
            </summary>
            <param name="x">
            Specify scale factors along the x axes, respectively.
            </param>
            <param name="y">
            Specify scale factors along the y axes, respectively.
            </param>
            <param name="z">
            Specify scale factors along the z axes, respectively.
            </param>
        </member>
        <member name="M:OpenGL.GL.glScale(System.Single,System.Single,System.Single)">
            <summary>
             multiply the current matrix by a general scaling matrix.
            </summary>
            <param name="x">
            Specify scale factors along the x axes, respectively.
            </param>
            <param name="y">
            Specify scale factors along the y axes, respectively.
            </param>
            <param name="z">
            Specify scale factors along the z axes, respectively.
            </param>
        </member>
        <member name="M:OpenGL.GL.glScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            define the scissor box.
            </summary>
            <param name="x">
            Specify the lower left corner of the scissor box. Initially (0, 0). 
            </param>
            <param name="y">
            Specify the lower left corner of the scissor box. Initially (0, 0). 
            </param>
            <param name="width">
            Specify the width of the scissor box. 
            When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
            <param name="height">
            Specify the height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSelectBuffer(System.Int32,System.UInt32[])">
            <summary>
            establish a buffer for selection mode values.
            </summary>
            <param name="size">
            Specifies the size of buffer. 
            </param>
            <param name="buffer">
            Returns the selection data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glShadeModel(System.UInt32)">
            <summary>
            select flat or smooth shading.
            </summary>
            <param name="mode">
            Specifies a symbolic value representing a shading technique.
            Accepted values are GL_FLAT and GL_SMOOTH. The initial value is GL_SMOOTH.
            </param>
        </member>
        <member name="M:OpenGL.GL.glStencilFunc(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            set front and back function and reference value for stencil testing.
            </summary>
            <param name="func">
            Specifies the test function. 
            Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, 
            GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS. 
            </param>
            <param name="Ref">
            Specifies the reference value for the stencil test. 
            ref is clamped to the range [0,2n−1], where n is the number of bitplanes in the stencil buffer. 
            The initial value is 0. 
            </param>
            <param name="mask">
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. 
            The initial value is all 1's.
            </param>
        </member>
        <member name="M:OpenGL.GL.glStencilMask(System.UInt32)">
            <summary>
            control the front and back writing of individual bits in the stencil planes.
            </summary>
            <param name="mask">
            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. 
            Initially, the mask is all 1's.
            </param>
        </member>
        <member name="M:OpenGL.GL.glStencilOp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set front and back stencil test actions.
            </summary>
            <param name="fail">
            Specifies the action to take when the stencil test fails. 
            Eight symbolic constants are accepted:
            GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT.
            The initial value is GL_KEEP. 
            </param>
            <param name="zfail">
            Specifies the stencil action when the stencil test passes, but the depth test fails. 
            dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP. 
            </param>
            <param name="zpass">
            Specifies the stencil action when both the stencil test and the depth test pass, 
            or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. 
            dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord1(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord2(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Single,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord3(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoord4(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexCoordPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of texture coordinates.
            </summary>
            <param name="size">
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </param>
            <param name="type">
            Specifies the data type of each texture coordinate. 
            Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. 
            The initial value is GL_FLOAT. 
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive texture coordinate sets. 
            If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
            </param>
            <param name="pointer">
            Specifies a pointer to the first coordinate of the first texture coordinate set in the array.
            The initial value is 0. 
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexEnv(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture environment parameter. 
            May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, 
            GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB,
            GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE,
            GL_ALPHA_SCALE, or GL_COORD_REPLACE. 
            </param>
            <param name="param">
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, 
            GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,
            GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, 
            a single boolean value for the point sprite texture coordinate replacement,
            a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexEnv(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture environment parameter.
            May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, 
            GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB,
            GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE,or GL_COORD_REPLACE. 
            </param>
            <param name="Params">
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE,
            GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,
            GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA,
            a single boolean value for the point sprite texture coordinate replacement, 
            a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexEnv(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture environment parameter. 
            May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, 
            GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB,
            GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE,
            GL_ALPHA_SCALE, or GL_COORD_REPLACE. 
            </param>
            <param name="param">
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, 
            GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,
            GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, 
            a single boolean value for the point sprite texture coordinate replacement,
            a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexEnv(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture environment parameter.
            May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, 
            GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB,
            GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE,or GL_COORD_REPLACE. 
            </param>
            <param name="Params">
            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE,
            GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,
            GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA,
            a single boolean value for the point sprite texture coordinate replacement, 
            a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexGen(System.UInt32,System.UInt32,System.Double)">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </param>
            <param name="param">
            Specifies a single-valued texture generation parameter, 
            one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexGen(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function or function parameters. 
            Must be GL_TEXTURE_GEN_MODE, GL_OBJECT_PLANE, or GL_EYE_PLANE. 
            </param>
            <param name="Params">
            Specifies an array of texture generation parameters. 
            If pname is GL_TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, 
            one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexGen(System.UInt32,System.UInt32,System.Single)">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </param>
            <param name="param">
            Specifies a single-valued texture generation parameter, 
            one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexGen(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function or function parameters. 
            Must be GL_TEXTURE_GEN_MODE, GL_OBJECT_PLANE, or GL_EYE_PLANE. 
            </param>
            <param name="Params">
            Specifies an array of texture generation parameters. 
            If pname is GL_TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, 
            one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexGen(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </param>
            <param name="param">
            Specifies a single-valued texture generation parameter, 
            one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexGen(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function or function parameters. 
            Must be GL_TEXTURE_GEN_MODE, GL_OBJECT_PLANE, or GL_EYE_PLANE. 
            </param>
            <param name="Params">
            Specifies an array of texture generation parameters. 
            If pname is GL_TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, 
            one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.
            Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture image.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level. 
            Level n is the nth mipmap reduction image
            </param>
            <param name="internalformat">
            Specifies the number of color components in the texture. 
            Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA,
            GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, 
            GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12,
            GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, 
            GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, 
            GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10,
            GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16,
            GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8,
            GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
            </param>
            <param name="width">
            Specifies the width of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, this value must be 2^n+2﻿(border) for some integer n.
            All implementations support texture images that are at least 64 texels wide. 
            The height of the 1D texture image is 1. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: 
            GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,
            GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture image.
            </summary>
            <param name="target">
            Specifies the target texture. 
            Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, 
            GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 
            GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level. 
            Level n is the nth mipmap reduction image. 
            </param>
            <param name="internalformat">
            Specifies the number of color components in the texture. 
            Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8,
            GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA,
            GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16,
            GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12,
            GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8,
            GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, 
            GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10,
            GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16,
            GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, 
            GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. 
            </param>
            <param name="width">
            Specifies the width of the texture image including the border if any.
            If the GL version does not support non-power-of-two sizes, this value must be 2^n+2﻿(border) for some integer n.
            All implementations support texture images that are at least 64 texels wide. 
            </param>
            <param name="height">
            Specifies the height of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, this value must be 2^m+2﻿(border) for some integer m.
            All implementations support texture images that are at least 64 texels high. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, 
            GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data.
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, 
            GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, 
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set texture parameters.
            </summary>
            <param name="target">
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, 
            or GL_TEXTURE_CUBE_MAP. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, 
            GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC,
            GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP. 
            </param>
            <param name="param">
            Specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set texture parameters
            </summary>
            <param name="target">
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D or GL_TEXTURE_3D. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T,
            GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, 
            GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP. 
            </param>
            <param name="Params">
            Specifies an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set texture parameters.
            </summary>
            <param name="target">
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, 
            or GL_TEXTURE_CUBE_MAP. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, 
            GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC,
            GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP. 
            </param>
            <param name="param">
            Specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture parameters
            </summary>
            <param name="target">
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D or GL_TEXTURE_3D. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T,
            GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, 
            GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP. 
            </param>
            <param name="Params">
            Specifies an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level. 
            Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data.
            The following symbolic values are accepted: 
            GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data.
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,
            GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory.
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. 
            Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
            GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
            or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted:
            GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, 
            and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,
            GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV.
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTranslate(System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix by a translation matrix.
            </summary>
            <param name="x">
            Specify the x coordinate of a translation vector.
            </param>
            <param name="y">
            Specify the y coordinate of a translation vector.
            </param>
            <param name="z">
            Specify the z coordinate of a translation vector.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTranslate(System.Single,System.Single,System.Single)">
            <summary>
            multiply the current matrix by a translation matrix.
            </summary>
            <param name="x">
            Specify the x coordinate of a translation vector.
            </param>
            <param name="y">
            Specify the y coordinate of a translation vector.
            </param>
            <param name="z">
            Specify the z coordinate of a translation vector.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Double,System.Double)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Double[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Single,System.Single)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Single[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Int32,System.Int32)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Int32[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Int16,System.Int16)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex2(System.Int16[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Double,System.Double,System.Double)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Double[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Single,System.Single,System.Single)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Single[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Int32,System.Int32,System.Int32)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Int32[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Int16,System.Int16,System.Int16)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex3(System.Int16[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Double[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Single[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Int32[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertex4(System.Int16[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of vertex data.
            </summary>
            <param name="size">
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4. 
            </param>
            <param name="type">
            Specifies the data type of each coordinate in the array. 
            Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT. 
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive vertices. 
            If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0. 
            </param>
            <param name="pointer">
            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0. 
            You can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the viewport.
            </summary>
            <param name="x">
            Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). 
            </param>
            <param name="y">
            Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            </param>
            <param name="width">
            Specify the width and height of the viewport.
            When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
            <param name="height">
            Specify the width and height of the viewport. 
            When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTexSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a three-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </param>
            <param name="level">
            Specifies the level-of-detail number.
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array. 
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawRangeElements(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            render primitives from array data.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render.
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted. 
            </param>
            <param name="start">
            Specifies the minimum array index contained in indices. 
            </param>
            <param name="end">
            Specifies the maximum array index contained in indices. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture image.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the n^th mipmap reduction image. 
            </param>
            <param name="internalFormat">
            Specifies the number of color components in the texture. 
            Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4,
            GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, 
            GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA,
            GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA,
            GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, 
            GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, 
            GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12,
            GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB,
            GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. 
            </param>
            <param name="width">
            Specifies the width of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes,
            this value must be 2^n+2﻿(border) for some integer n. 
            All implementations support 3D texture images that are at least 16 texels wide. 
            </param>
            <param name="height">
            Specifies the height of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, 
            this value must be 2^m+2﻿(border) for some integer m. 
            All implementations support 3D texture images that are at least 16 texels high. 
            </param>
            <param name="depth">
            Specifies the depth of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, 
            this value must be 2^k+2﻿(border) for some integer k.
            All implementations support 3D texture images that are at least 16 texels deep. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="format">
            Specifies the format of the pixel data.
            The following symbolic values are accepted: 
            GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, 
            and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: 
            GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,
            GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, 
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, 
            GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            Yo can use the function GLAX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number.
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: 
            GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, 
            GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: 
            GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, 
            GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5,
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8,
            GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glActiveTexture(System.UInt32)">
            <summary>
            select active texture unit.
            </summary>
            <param name="texture">
            Specifies which texture unit to make active.
            The number of texture units is implementation dependent, but must be at least two. 
            texture must be one of GL_TEXTUREi, 
            where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1).
            The initial value is GL_TEXTURE0. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClientActiveTexture(System.UInt32)">
            <summary>
            select active texture unit.
            </summary>
            <param name="texture">
            Specifies which texture unit to make active. 
            The number of texture units is implementation dependent, but must be at least two. 
            texture must be one of GL_TEXTUREi, 
            where i ranges from 0 to the value of GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value. 
            The initial value is GL_TEXTURE0. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTexImage1D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture image in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="internalformat">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="width">
            Specifies the width of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, 
            this value must be 26n+2﻿(border) for some integer n. 
            All implementations support texture images that are at least 64 texels wide. 
            The height of the 1D texture image is 1. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture image in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. 
            Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X,
            GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
            GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP. 
            </param>
            <param name="level">
            Specifies the level-of-detail number.
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="internalformat">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="width">
            Specifies the width of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, t
            his value must be 2^n+2﻿(border) for some integer n. 
            All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide. 
            </param>
            <param name="height">
            Specifies the height of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, 
            this value must be Must be 2^n+2﻿(border) for some integer n. 
            All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTexImage3D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture image in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </param>
            <param name="internalformat">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="width">
            Specifies the width of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, 
            this value must be 2^n+2﻿(border) for some integer n. 
            All implementations support 3D texture images that are at least 16 texels wide. 
            </param>
            <param name="height">
            Specifies the height of the texture image including the border if any. 
            If the GL version does not support non-power-of-two sizes, 
            this value must be 2^n+2﻿(border) for some integer n. 
            All implementations support 3D texture images that are at least 16 texels high. 
            </param>
            <param name="depth">
            Specifies the depth of the texture image including the border if any.
            If the GL version does not support non-power-of-two sizes, 
            this value must be 2^n+2﻿(border) for some integer n.
            All implementations support 3D texture images that are at least 16 texels deep. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory.
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture subimage in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory.
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture subimage in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture.
            Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
            GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
            or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTexSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D. 
            </param>
            <param name="level">
            Specifies the level-of-detail number.
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetCompressedTexImage(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            return a compressed texture image.
            </summary>
            <param name="target">
            Specifies which texture is to be obtained.
            GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3DGL_TEXTURE_CUBE_MAP_POSITIVE_X,
            GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 
            GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted. 
            </param>
            <param name="lod">
            Specifies the level-of-detail number of the desired image.
            Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </param>
            <param name="img">
            Returns the compressed texture image. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glLoadTransposeMatrix(System.Double[])">
            <summary>
            replace the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glLoadTransposeMatrix(System.Single[])">
            <summary>
            replace the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultTransposeMatrix(System.Double[])">
            <summary>
            multiply the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Array of 16 consecutive values that are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultTransposeMatrix(System.Single[])">
            <summary>
            multiply the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Array of 16 consecutive values that are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord1(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord2(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param >
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord3(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two.
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiTexCoord4(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            Specifies the texture unit whose coordinates should be modified.
            The number of texture units is implementation dependent, but must be at least two. 
            Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, 
            which is an implementation-dependent value. 
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.GL.glSampleCoverage(System.Single,System.Boolean)">
            <summary>
            specify multisample coverage parameters.
            </summary>
            <param name="value">
            Specify a single floating-point sample coverage value. 
            The value is clamped to the range [0,1]. The initial value is 1.0. 
            </param>
            <param name="invert">
            Specify a single boolean value representing if the coverage masks should be inverted. 
            GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the blend color.
            </summary>
            <param name="red">
            specify the components of GL_BLEND_COLOR.
            </param>
            <param name="green">
            specify the components of GL_BLEND_COLOR.
            </param>
            <param name="blue">
            specify the components of GL_BLEND_COLOR.
            </param>
            <param name="alpha">
            specify the components of GL_BLEND_COLOR.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendEquation(System.UInt32)">
            <summary>
            specify the equation used for both the RGB blend equation and the Alpha blend equation.
            </summary>
            <param name="mode">
            specifies how source and destination colors are combined. 
            It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendFuncSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic for RGB and alpha components separately
            </summary>
            <param name="sfactorRGB">
            Specifies how the red, green, and blue blending factors are computed. 
            The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, 
            GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, 
            GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, 
            GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, 
            and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
            </param>
            <param name="dfactorRGB">
            Specifies how the red, green, and blue destination blending factors are computed.
            The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, 
            GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, 
            GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, 
            GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO. 
            </param>
            <param name="sfactorAlpha">
            Specified how the alpha source blending factor is computed. 
            The same symbolic constants are accepted as for srcRGB. The initial value is GL_ONE. 
            </param>
            <param name="dfactorAlpha">
            Specified how the alpha destination blending factor is computed. 
            The same symbolic constants are accepted as for dstRGB. The initial value is GL_ZERO. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFogCoordPointer(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of fog coordinates.
            </summary>
            <param name="type">
            Specifies the data type of each fog coordinate. 
            Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive fog coordinates. 
            If stride is 0, the array elements are understood to be tightly packed. The initial value is 0. 
            </param>
            <param name="pointer">
            Specifies a pointer to the first coordinate of the first fog coordinate in the array.
            The initial value is 0. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glFogCoord(System.Double)">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specify the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFogCoord(System.Double[])">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specifies an array containing a single value representing the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFogCoord(System.Single)">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specify the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFogCoord(System.Single[])">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specifies an array containing a single value representing the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiDrawArrays(System.UInt32,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            render multiple sets of primitives from array data.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted. 
            </param>
            <param name="first">
             An array of starting indices in the enabled arrays. 
            </param>
            <param name="count">
            An array of the number of indices to be rendered. 
            </param>
            <param name="drawcount">
            Specifies the size of the first and count .
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiDrawElements(System.UInt32,System.Int32[],System.UInt32,System.IntPtr[],System.Int32)">
            <summary>
            render multiple sets of primitives by specifying indices of array data elements.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted. 
            </param>
            <param name="count">
            An array of the elements counts. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored.
            </param>
            <param name="drawcount">
            Specifies the size of the count array.
            </param>
        </member>
        <member name="M:OpenGL.GL.glPointParameter(System.UInt32,System.Single)">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            Specifies a single-valued point parameter. 
            GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted. 
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPointParameter(System.UInt32,System.Single[])">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            Specifies a point parameter.
            GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_DISTANCE_ATTENUATION, GL_POINT_FADE_THRESHOLD_SIZE,
            and GL_POINT_SPRITE_COORD_ORIGIN are accepted. 
            </param>
            <param name="Params">
            Specifies the value or values to be assigned to pname. 
            GL_POINT_DISTANCE_ATTENUATION requires an array of three values. 
            All other parameters accept an array containing only a single value. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPointParameter(System.UInt32,System.Int32)">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            Specifies a single-valued point parameter. 
            GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted. 
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPointParameter(System.UInt32,System.Int32[])">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            Specifies a point parameter.
            GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_DISTANCE_ATTENUATION, GL_POINT_FADE_THRESHOLD_SIZE,
            and GL_POINT_SPRITE_COORD_ORIGIN are accepted. 
            </param>
            <param name="Params">
            Specifies the value or values to be assigned to pname. 
            GL_POINT_DISTANCE_ATTENUATION requires an array of three values. 
            All other parameters accept an array containing only a single value. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.SByte[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Double,System.Double,System.Double)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Double[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Single,System.Single,System.Single)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Single[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Int32[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Int16[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Byte,System.Byte,System.Byte)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.Byte[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.UInt32[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColor3(System.UInt16[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSecondaryColorPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of secondary colors.
            </summary>
            <param name="size">
            Specifies the number of components per color. Must be 3. 
            </param>
            <param name="type">
            Specifies the data type of each color component in the array. 
            Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, 
            GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT. 
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive colors. 
            If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0. 
            </param>
            <param name="pointer">
            Specifies a pointer to the first component of the first color element in the array. 
            The initial value is 0. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Double,System.Double)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Double[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Single,System.Single)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Single[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Int32,System.Int32)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Int32[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Int16,System.Int16)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos2(System.Int16[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Double,System.Double,System.Double)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Double[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Single,System.Single,System.Single)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Single[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Int32[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glWindowPos3(System.Int16[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBeginQuery(System.UInt32,System.UInt32)">
            <summary>
            delimit the boundaries of a query object.
            </summary>
            <param name="target">
            Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery.
            The symbolic constant must be GL_SAMPLES_PASSED. 
            </param>
            <param name="id">
            Specifies the name of a query object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindBuffer(System.UInt32,System.UInt32)">
            <summary>
            bind a named buffer object.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound. 
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, 
            GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <param name="buffer">
            Specifies the name of a buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBufferData(System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            creates and initializes a buffer object's data store.
            </summary>
            <param name="target">
            Specifies the target buffer object. 
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, 
            or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <param name="size">
            Specifies the size in bytes of the buffer object's new data store.
            </param>
            <param name="data">
            Specifies a pointer to data that will be copied into the data store for initialization,
            or NULL if no data is to be copied. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
            <param name="usage">
            Specifies the expected usage pattern of the data store. 
            The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY,
            GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            updates a subset of a buffer object's data store.
            </summary>
            <param name="target">
            Specifies the target buffer object. 
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER,
            GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes. 
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being replaced. 
            </param>
            <param name="data">
            Specifies a pointer to the new data that will be copied into the data store. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteBuffers(System.Int32,System.UInt32[])">
            <summary>
            delete named buffer objects.
            </summary>
            <param name="n">
            Specifies the number of buffer objects to be deleted.
            </param>
            <param name="buffers">
            Specifies an array of buffer objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteQueries(System.Int32,System.UInt32[])">
            <summary>
            delete named query objects.
            </summary>
            <param name="n">
            Specifies the number of query objects to be deleted. 
            </param>
            <param name="ids">
            Specifies an array of query objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEndQuery(System.UInt32)">
            <summary>
            delimit the boundaries of a query object.
            </summary>
            <param name="target">
            Specifies the target type of query object to be concluded.
            The symbolic constant must be GL_SAMPLES_PASSED. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenBuffers(System.Int32,System.UInt32[])">
            <summary>
            generate buffer object names.
            </summary>
            <param name="n">
            Specifies the number of buffer object names to be generated. 
            </param>
            <param name="buffers">
            Specifies an array in which the generated buffer object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenQueries(System.Int32,System.UInt32[])">
            <summary>
            generate query object names.
            </summary>
            <param name="n">
            Specifies the number of query object names to be generated. 
            </param>
            <param name="ids">
            Specifies an array in which the generated query object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetBufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="target">
            Specifies the target buffer object. 
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a buffer object parameter. 
            Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE. 
            </param>
            <param name="Params">
            Returns the requested parameter.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetBufferPointer(System.UInt32,System.UInt32,System.IntPtr[])">
            <summary>
            return the pointer to a mapped buffer object's data store.
            </summary>
            <param name="target">
            Specifies the target buffer object. 
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <param name="pname">
            Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER. 
            </param>
            <param name="Params">
            Returns the pointer value specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            returns a subset of a buffer object's data store.
            </summary>
            <param name="target">
            Specifies the target buffer object.
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes. 
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being returned. 
            </param>
            <param name="data">
            Specifies a pointer to the location where buffer object data is returned.
            You can use the function LAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryObject(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a query object parameter.
            Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryObject(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a query object parameter.
            Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetQuery(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a query object target.
            </summary>
            <param name="target">
            Specifies a query object target. Must be GL_SAMPLES_PASSED. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a query object target parameter. 
            Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsBuffer(System.UInt32)">
            <summary>
            determine if a name corresponds to a buffer object.
            </summary>
            <param name="buffer">
            Specifies a value that may be the name of a buffer object. 
            </param>
            <returns>
            glIsBuffer returns GL_TRUE if buffer is currently the name of a buffer object. 
            If buffer is zero, or is a non-zero value that is not currently the name of a buffer object, 
            or if an error occurs, glIsBuffer returns GL_FALSE. 
            </returns>
        </member>
        <member name="M:OpenGL.GL.glIsQuery(System.UInt32)">
            <summary>
            determine if a name corresponds to a query object.
            </summary>
            <param name="id">
            Specifies a value that may be the name of a query object. 
            </param>
            <returns>
            glIsQuery returns GL_TRUE if id is currently the name of a query object.
            If id is zero, or is a non-zero value that is not currently the name of a query object, 
            or if an error occurs, glIsQuery returns GL_FALSE. 
            </returns>
        </member>
        <member name="M:OpenGL.GL.glMapBuffer(System.UInt32,System.UInt32)">
            <summary>
            map a buffer object's data store.
            </summary>
            <param name="target">
            Specifies the target buffer object being mapped. 
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, 
            or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <param name="access">
            Specifies the access policy, indicating whether it will be possible to read from, write to, 
            or both read from and write to the buffer object's mapped data store. 
            The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE. 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glUnmapBuffer(System.UInt32)">
            <summary>
            unmap a buffer object's data store
            </summary>
            <param name="target">
            Specifies the target buffer object being unmapped. 
            The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glAttachShader(System.UInt32,System.UInt32)">
            <summary>
            Attaches a shader object to a program object.
            </summary>
            <param name="program">
            Specifies the program object to which a shader object will be attached.
            </param>
            <param name="shader">
            Specifies the shader object that is to be attached.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindAttribLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Associates a generic vertex attribute index with a named attribute variable.
            </summary>
            <param name="program">
            Specifies the handle of the program object in which the association is to be made.
            </param>
            <param name="index">
            Specifies the index of the generic vertex attribute to be bound.
            </param>
            <param name="name">
            Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendEquationSeparate(System.UInt32,System.UInt32)">
            <summary>
            set the RGB blend equation and the alpha blend equation separately.
            </summary>
            <param name="modeRGB">
            specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined.
            It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. 
            </param>
            <param name="modeAlpha">
            specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. 
            It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompileShader(System.UInt32)">
            <summary>
            Compiles a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object to be compiled.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateProgram">
            <summary>
            Creates a program object.
            </summary>
            <returns>
            returns a non-zero value by which it can be referenced.
            </returns>
        </member>
        <member name="M:OpenGL.GL.glCreateShader(System.UInt32)">
            <summary>
            Creates a shader object.
            </summary>
            <param name="type">
            Specifies the type of shader to be created. Must be either GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
            </param>
            <returns>
            returns a non-zero value by which it can be referenced.
            </returns>
        </member>
        <member name="M:OpenGL.GL.glDeleteProgram(System.UInt32)">
            <summary>
            Deletes a program object.
            </summary>
            <param name="program">
            Specifies the program object to be deleted.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteShader(System.UInt32)">
            <summary>
            Deletes a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object to be deleted.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDetachShader(System.UInt32,System.UInt32)">
            <summary>
            Detaches a shader object from a program object to which it is attached.
            </summary>
            <param name="program">
            Specifies the program object from which to detach the shader object.
            </param>
            <param name="shader">
            Specifies the shader object to be detached.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDisableVertexAttribArray(System.UInt32)">
            <summary>
            Disable a generic vertex attribute array
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be disabled.
            </param>
        </member>
        <member name="M:OpenGL.GL.glEnableVertexAttribArray(System.UInt32)">
            <summary>
            Enable  a generic vertex attribute array
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be enabled .
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Byte[])">
            <summary>
            Returns information about an active attribute variable for the specified program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="index">
            Specifies the index of the attribute variable to be queried.
            </param>
            <param name="maxLength">
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </param>
            <param name="length">
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </param>
            <param name="size">
            Returns the size of the attribute variable.
            </param>
            <param name="type">
            Returns the data type of the attribute variable.
            </param>
            <param name="name">
            Returns a null terminated string containing the name of the attribute variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Byte[])">
            <summary>
            Returns information about an active uniform variable for the specified program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="index">
            Specifies the index of the uniform variable to be queried.
            </param>
            <param name="maxLength">
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </param>
            <param name="length">
            Returns the number of characters actually written by OpenGL in the string 
            indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </param>
            <param name="size">
            Returns the size of the uniform variable.
            </param>
            <param name="type">
            Returns the data type of the uniform variable.
            </param>
            <param name="name">
            Returns a null terminated string containing the name of the uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetAttachedShaders(System.UInt32,System.Int32,System.Int32@,System.UInt32[])">
            <summary>
            Returns the handles of the shader objects attached to a program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="maxCount">
            Specifies the size of the array for storing the returned object names.
            </param>
            <param name="count">
            Returns the number of names actually returned in shaders.
            </param>
            <param name="shaders">
            Specifies an array that is used to return the names of attached shader objects.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetAttribLocation(System.UInt32,System.Byte[])">
            <summary>
            Returns the location of an attribute variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="name">
            Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glGetProgramInfoLog(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Returns the information log for a program object.
            </summary>
            <param name="program">
            Specifies the program object whose information log is to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the character buffer for storing the returned information log.
            </param>
            <param name="length">
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </param>
            <param name="infoLog">
            Specifies an array of characters that is used to return the information log.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgram(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Returns a parameter from a program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="pname">
            Specifies the object parameter.
            Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS,
            GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
            GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
            </param>
            <param name="Params">
            Returns the requested object parameter.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetShaderInfoLog(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Returns the information log for a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object whose information log is to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the character buffer for storing the returned information log.
            </param>
            <param name="length">
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </param>
            <param name="infoLog">
            Specifies an array of characters that is used to return the information log.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetShaderSource(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
             Returns the source code string from a shader object.
            </summary>
            <param name="obj">
            Specifies the shader object to be queried.
            </param>
            <param name="maxLength">
            Specifies the size of the character buffer for storing the returned source code string.
            </param>
            <param name="length">
            Returns the length of the string returned in source (excluding the null terminator).
            </param>
            <param name="source">
            Specifies an array of characters that is used to return the source code string.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetShader(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Returns a parameter from a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object to be queried.
            </param>
            <param name="pname">
            Specifies the object parameter. 
            Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS,
            GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
            </param>
            <param name="Params">
            Returns the requested object parameter.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetUniformLocation(System.UInt32,System.Byte[])">
            <summary>
            Returns the location of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="name">
            Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glGetUniform(System.UInt32,System.Int32,System.Single[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetUniform(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexAttribPointer(System.UInt32,System.UInt32,System.IntPtr[])">
            <summary>
            return the address of the specified generic vertex attribute pointer.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be returned.
            </param>
            <param name="pname">
            Specifies the symbolic name of the generic vertex attribute parameter to be returned.
            Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
            </param>
            <param name="pointer">
            Returns the pointer value.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexAttrib(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            Specifies the symbolic name of the vertex attribute parameter to be queried. 
            Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,
            GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,
            GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexAttrib(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            Specifies the symbolic name of the vertex attribute parameter to be queried. 
            Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,
            GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,
            GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexAttrib(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            Specifies the symbolic name of the vertex attribute parameter to be queried. 
            Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,
            GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,
            GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsProgram(System.UInt32)">
            <summary>
            Determines if a name corresponds to a program object.
            </summary>
            <param name="program">
            Specifies a potential program object.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glIsShader(System.UInt32)">
            <summary>
            Determines if a name corresponds to a shader object.
            </summary>
            <param name="shader">
            Specifies a potential shader object.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glLinkProgram(System.UInt32)">
            <summary>
            Links a program object.
            </summary>
            <param name="program">
            Specifies the handle of the program object to be linked.
            </param>
        </member>
        <member name="M:OpenGL.GL.glShaderSource(System.UInt32,System.Int32,System.IntPtr[],System.IntPtr)">
            <summary>
            Replaces the source code in a shader object.
            </summary>
            <param name="shader">
            Specifies the handle of the shader object whose source code is to be replaced.
            </param>
            <param name="count">
            Specifies the number of elements in the string and length arrays.
            </param>
            <param name="str">
            Specifies an array of pointers to strings containing the source code to be loaded into the shader.
            You can use the function GLAUX.GetArrayPointer to get the string pointer.
            </param>
            <param name="length">
            Specifies a pointer of an array of string lengths.
            you can use the function GLAUX.GetArrayPointer to get the array poiner.
            </param>
        </member>
        <member name="M:OpenGL.GL.glStencilFuncSeparate(System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            set front and/or back function and reference value for stencil testing.
            </summary>
            <param name="frontfunc">
            Specifies whether front and/or back stencil state is updated.
            Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. 
            </param>
            <param name="backfunc">
            Specifies the test function. 
            Eight symbolic constants are valid:
            GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS.
            The initial value is GL_ALWAYS. 
            </param>
            <param name="Ref">
            Specifies the reference value for the stencil test. 
            ref is clamped to the range [0,2^n−1], where n is the number of bitplanes in the stencil buffer. 
            The initial value is 0. 
            </param>
            <param name="mask">
            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done.
            The initial value is all 1's. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glStencilMaskSeparate(System.UInt32,System.UInt32)">
            <summary>
            control the front and/or back writing of individual bits in the stencil planes.
            </summary>
            <param name="face">
            Specifies whether the front and/or back stencil writemask is updated. 
            Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. 
            </param>
            <param name="mask">
            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. 
            Initially, the mask is all 1's.
            </param>
        </member>
        <member name="M:OpenGL.GL.glStencilOpSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set front and/or back stencil test actions.
            </summary>
            <param name="face">
            Specifies whether front and/or back stencil state is updated.
            Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. 
            </param>
            <param name="sfail">
            Specifies the action to take when the stencil test fails. 
            Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. 
            The initial value is GL_KEEP. 
            </param>
            <param name="dpfail">
            Specifies the stencil action when the stencil test passes, but the depth test fails.
            dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP. 
            </param>
            <param name="dppass">
            Specifies the stencil action when both the stencil test and the depth test pass, 
            or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. 
            dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v3">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v3">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix2(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix3(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix4(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUseProgram(System.UInt32)">
            <summary>
            Installs a program object as part of current rendering state.
            </summary>
            <param name="program">
            Specifies the handle of the program object whose executables are to be used as part of current rendering state.
            </param>
        </member>
        <member name="M:OpenGL.GL.glValidateProgram(System.UInt32)">
            <summary>
             Validates a program object.
            </summary>
            <param name="program">
            Specifies the handle of the program object to be validated.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib1(System.UInt32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib1(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib1(System.UInt32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib1(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib1(System.UInt32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib1(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib2(System.UInt32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib2(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib2(System.UInt32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib2(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib2(System.UInt32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib2(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib3(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib3(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib3(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib3(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib3(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4N(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4N(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4N(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4N(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4N(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4N(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4N(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttrib4(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribPointer(System.UInt32,System.Int32,System.UInt32,System.Boolean,System.Int32,System.IntPtr)">
            <summary>
             define an array of generic vertex attribute data.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="size">
            Specifies the number of components per generic vertex attribute. 
            Must be 1, 2, 3, or 4. The initial value is 4.
            </param>
            <param name="type">
            Specifies the data type of each component in the array. 
            Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, 
            GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
            </param>
            <param name="normalized">
            Specifies whether fixed-point data values should be normalized (GL_TRUE) 
            or converted directly as fixed-point values (GL_FALSE) when they are accessed.
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive generic vertex attributes. 
            If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. 
            The initial value is 0.
            </param>
            <param name="pointer">
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix2x3(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array of matrices, 
            and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix2x4(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array of matrices, 
            and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix3x2(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array of matrices, 
            and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix3x4(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array of matrices, 
            and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix4x2(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array of matrices, 
            and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix4x3(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            Specifies the number of matrices that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array of matrices, 
            and 1 or more if it is an array of matrices.
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBeginConditionalRender(System.UInt32,System.UInt32)">
            <summary>
            start conditional rendering.
            </summary>
            <param name="id">
            Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded. 
            </param>
            <param name="mode">
            Specifies how glBeginConditionalRender interprets the results of the occlusion query. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBeginTransformFeedback(System.UInt32)">
            <summary>
            start transform feedback operation.
            </summary>
            <param name="primitiveMode">
            Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindFragDataLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            bind a user-defined varying out variable to a fragment shader color number.
            </summary>
            <param name="program">
            The name of the program containing varying out variable whose binding to modify 
            </param>
            <param name="colorNumber">
            The color number to bind the user-defined varying out variable to 
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose binding to modify 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClampColor(System.UInt32,System.UInt32)">
            <summary>
            specify whether data read via glReadPixels should be clamped.
            </summary>
            <param name="target">
            Target for color clamping. target must be GL_CLAMP_READ_COLOR. 
            </param>
            <param name="clamp">
            Specifies whether to apply color clamping. clamp must be GL_TRUE or GL_FALSE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearBufferf(System.UInt32,System.Int32,System.Single,System.Int32)">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="depth">
            The value to clear the depth buffer to. 
            </param>
            <param name="stencil">
            The value to clear the stencil buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearBuffer(System.UInt32,System.Int32,System.Single[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearBuffer(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearBuffer(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorMask(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            enable and disable writing of frame buffer color components.
            </summary>
            <param name="buf">
            For glColorMaski, specifies the index of the draw buffer whose color mask to set. 
            </param>
            <param name="red">
            Specify whether red is to be written into the frame buffer.
            The initial value is  GL_TRUE, indicating that the color component is written. 
            </param>
            <param name="green">
            Specify whether green is to be written into the frame buffer.
            The initial value is  GL_TRUE, indicating that the color component is written. 
            </param>
            <param name="blue">
            Specify whether blue is to be written into the frame buffer.
            The initial value is  GL_TRUE, indicating that the color component is written. 
            </param>
            <param name="alpha">
             Specify whether alpha is to be written into the frame buffer.
            The initial value is  GL_TRUE, indicating that the color component is written. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDisable(System.UInt32,System.UInt32)">
            <summary>
            disable server-side GL capabilities.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability
            </param>
            <param name="index">
            Specifies the index of the switch to disable (for glEnablei and glDisablei only). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEnable(System.UInt32,System.UInt32)">
            <summary>
            enable server-side GL capabilities.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability
            </param>
            <param name="index">
            Specifies the index of the switch to enable (for glEnablei and glDisablei only). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEndConditionalRender">
            <summary>
            end conditional rendering
            </summary>
        </member>
        <member name="M:OpenGL.GL.glEndTransformFeedback">
            <summary>
            end transform feedback operation
            </summary>
        </member>
        <member name="M:OpenGL.GL.glGetBoolean(System.UInt32,System.UInt32,System.Boolean[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned for non-indexed versions of glGet. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetFragDataLocation(System.UInt32,System.Byte[])">
            <summary>
            query the bindings of color numbers to user-defined varying out variables.
            </summary>
            
            <param name="program">
            The name of the program containing varying out variable whose binding to query 
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose binding to query 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glGetString(System.UInt32,System.UInt32)">
            <summary>
            return a string describing the current GL connection
            </summary>
            <param name="name">
            Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. 
            Additionally, glGetStringi accepts the GL_EXTENSIONS token. 
            </param>
            <param name="index">
            For glGetStringi, specifies the index of the string to return. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetTexParameterI(System.UInt32,System.UInt32,System.Int32[])">
             <summary>
             return texture parameter values.
             </summary>
             <param name="target">
             Specifies the target to which the texture is bound for glGetTexParameterfv, 
             glGetTexParameteriv, glGetTexParameterIiv, and glGetTexParameterIuiv functions. 
             GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, 
             GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D,
             GL_TEXTURE_CUBE_MAP, GL_TEXTURE_RECTANGLE, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
             </param>
             <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL,
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS,
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
             </param>
             <param name="Params">
             Returns the texture parameters.
             </param>
        </member>
        <member name="M:OpenGL.GL.glGetTexParameterI(System.UInt32,System.UInt32,System.UInt32[])">
             <summary>
             return texture parameter values.
             </summary>
             <param name="target">
             Specifies the target to which the texture is bound for glGetTexParameterfv, 
             glGetTexParameteriv, glGetTexParameterIiv, and glGetTexParameterIuiv functions. 
             GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, 
             GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D,
             GL_TEXTURE_CUBE_MAP, GL_TEXTURE_RECTANGLE, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.
             </param>
             <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL,
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS,
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
             </param>
             <param name="Params">
             Returns the texture parameters.
             </param>
        </member>
        <member name="M:OpenGL.GL.glGetTransformFeedbackVarying(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Byte[])">
            <summary>
            retrieve information about varying variables selected for transform feedback.
            </summary>
            <param name="program">
            The name of the target program object. 
            </param>
            <param name="index">
            The index of the varying variable whose information to retrieve. 
            </param>
            <param name="bufSize">
            The maximum number of characters, including the null terminator, that may be written into name. 
            </param>
            <param name="length">
            The address of a variable which will receive the number of characters written into name, 
            excluding the null-terminator.
            If length is NULL no length is returned. 
            </param>
            <param name="size">
            The address of a variable that will receive the size of the varying.
            </param>
            <param name="type">
            The address of a variable that will recieve the type of the varying. 
            </param>
            <param name="name">
            The address of a buffer into which will be written the name of the varying. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetUniform(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexAttribI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            Specifies the symbolic name of the vertex attribute parameter to be queried.
            Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,
            GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,
            GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, 
            or GL_CURRENT_VERTEX_ATTRIB.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexAttribI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            Specifies the symbolic name of the vertex attribute parameter to be queried.
            Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,
            GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,
            GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, 
            or GL_CURRENT_VERTEX_ATTRIB.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsEnabled(System.UInt32,System.UInt32)">
            <summary>
            test whether a capability is enabled.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability. 
            </param>
            <param name="index">
            Specifies the index of the capability. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glTexParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="target">
            Specifies the target to which the texture is bound for glTexParameter functions.
            Must be one of GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, 
            GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP,
            GL_TEXTURE_CUBE_MAP_ARRAY, or GL_TEXTURE_RECTANGLE.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter.
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER,
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            </param>
            <param name="Params">
            For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="target">
            Specifies the target to which the texture is bound for glTexParameter functions.
            Must be one of GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, 
            GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP,
            GL_TEXTURE_CUBE_MAP_ARRAY, or GL_TEXTURE_RECTANGLE.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter.
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER,
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            </param>
            <param name="Params">
            For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTransformFeedbackVaryings(System.UInt32,System.Int32,System.IntPtr[],System.UInt32)">
             <summary>
             specify values to record in transform feedback buffers.
             </summary>
             <param name="program">
             The name of the target program object.
             </param>
             <param name="count">
             The number of varying variables used for transform feedback. 
             </param>
             <param name="varyings">  
            An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
             </param>
             <param name="bufferMode">
             Identifies the mode used to capture the varying variables when transform feedback is active. 
             bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS. 
             </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v1">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v2">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v1">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v2">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v3">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI1(System.UInt32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI1(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI1(System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI1(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI2(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI2(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI2(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI2(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI3(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI3(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI3(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI3(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v3">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v3">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribI4(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribIPointer(System.UInt32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of generic vertex attribute data.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="size">
            Specifies the number of components per generic vertex attribute. 
            Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. 
            The initial value is 4.
            </param>
            <param name="type">
            Specifies the data type of each component in the array.
            The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, 
            and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer. 
            Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, 
            GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by glVertexAttribPointer. 
            GL_DOUBLE is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. 
            The initial value is GL_FLOAT.
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive generic vertex attributes.
            If stride is 0, the generic vertex attributes are understood to be tightly packed in the array.
            The initial value is 0.
            </param>
            <param name="pointer">
            Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. 
            The initial value is 0.
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawArraysInstanced(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            draw multiple instances of a range of elements.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,
            GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, 
            GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="first">
            Specifies the starting index in the enabled arrays. 
            </param>
            <param name="count">
            Specifies the number of indices to be rendered. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the specified range of indices to be rendered.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawElementsInstanced(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            draw multiple instances of a set of elements.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render.
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
             
            Specifies the type of the values in indices.
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
            <param name="primcount">
            Specifies the number of instances of the specified range of indices to be rendered. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPrimitiveRestartIndex(System.UInt32)">
            <summary>
            specify the primitive restart index.
            </summary>
            <param name="buffer">
            Specifies the value to be interpreted as the primitive restart index. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexBuffer(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a buffer object's data store to a buffer texture object.
            </summary>
            <param name="target">
            Specifies the target to which the texture is bound for glTexBuffer. Must be GL_TEXTURE_BUFFER.
            </param>
            <param name="internalFormat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferTexture(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
             <summary>
             attach a level of a texture object as a logical buffer of a framebuffer object.
             </summary>
             <param name="target">
             Specifies the target to which the framebuffer is bound for all commands except glNamedFramebufferTexture. 
             </param>
             <param name="attachment">
             Specifies the attachment point of the framebuffer. 
             </param>
             <param name="texture">  
            Specifies the name of an existing texture object to attach.
             </param>
             <param name="level">
             Specifies the mipmap level of the texture object to attach. 
             </param>
        </member>
        <member name="M:OpenGL.GL.glGetBufferParameteri64(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound for glGetBufferParameteriv and glGetBufferParameteri64v. 
            Must be:GL_ATOMIC_COUNTER_BUFFER ,GL_COPY_READ_BUFFER Buffer ,GL_COPY_WRITE_BUFFER Buffer ,GL_DISPATCH_INDIRECT_BUFFER,
            GL_DRAW_INDIRECT_BUFFER,GL_ELEMENT_ARRAY_BUFFER ,GL_PIXEL_PACK_BUFFER,GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,
            GL_SHADER_STORAGE_BUFFER,GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .
            </param>
            <param name="value">
            Specifies the name of the buffer object parameter to query. 
            </param>
            <param name="data">
            Returns the requested parameter.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetInteger(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned for non-indexed versions of glGet.
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribDivisor(System.UInt32,System.UInt32)">
            <summary>
            modify the rate at which generic vertex attributes advance during instanced rendering.
            </summary>
            <param name="index">
            Specify the index of the generic vertex attribute. 
            </param>
            <param name="divisor">
            Specify the number of instances that will pass between updates of the generic attribute at slot index. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendEquationSeparate(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the RGB blend equation and the alpha blend equation separately.
            </summary>
            <param name="buf">
            for glBlendEquationSeparatei, 
            specifies the index of the draw buffer for which to set the blend equations. 
            </param>
            <param name="modeRGB">
            specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined.
            It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. 
            </param>
            <param name="modeAlpha">
            specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. 
            It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendEquation(System.UInt32,System.UInt32)">
            <summary>
            specify the equation used for both the RGB blend equation and the Alpha blend equation.
            </summary>
            <param name="buf">
            for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation. 
            </param>
            <param name="mode">
            specifies how source and destination colors are combined.
            It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendFuncSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic for RGB and alpha components separately.
            </summary>
            <param name="buf">
            For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions. 
            </param>
            <param name="srcRGB">
            Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE. 
            </param>
            <param name="dstRGB">
            Specifies how the red, green, and blue destination blending factors are computed. 
            The initial value is GL_ZERO. 
            </param>
            <param name="srcAlpha">
            Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
            </param>
            <param name="dstAlpha">
            Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlendFunc(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic.
            </summary>
            <param name="buf">
            For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.
            </param>
            <param name="src">
            Specifies how the red, green, blue, and alpha source blending factors are computed. 
            The initial value is GL_ONE. 
            </param>
            <param name="dst">
            Specifies how the red, green, blue, and alpha destination blending factors are computed. 
            The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR,
            GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA,
            GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA,
            and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMinSampleShading(System.Single)">
            <summary>
            specifies minimum rate at which sample shaing takes place.
            </summary>
            <param name="value">
            Specifies the rate at which samples are shaded within each covered pixel. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetGraphicsResetStatus">
            <summary>
            check if the rendering context has not been lost due to software or hardware issues.
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glGetnCompressedTexImage(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            return a compressed texture image.
            </summary>
            <param name="target">
            Specifies the target to which the texture is bound for glGetCompressedTexImage and glGetnCompressedTexImage functions.
            GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D,
            GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, 
            GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 
            and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_TEXTURE_RECTANGLE are accepted.
            </param>
            <param name="lod">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer pixels for glGetCompressedTextureImage and glGetnCompressedTexImage functions.
            </param>
            <param name="pixels">
            Returns the compressed texture image.
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetnTexImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            return a texture image.
            </summary>
            <param name="tex">
            Specifies the target to which the texture is bound for glGetTexImage and glGetnTexImage functions. 
            GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, 
            GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, 
            GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 
            GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, and GL_TEXTURE_CUBE_MAP_ARRAY are acceptable.
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="format">
            Specifies a pixel format for the returned data. 
            The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, 
            GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER, GL_GREEN_INTEGER, GL_BLUE_INTEGER,
            GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, GL_BGR_INTEGER, GL_BGRA_INTEGER.
            </param>
            <param name="type">
            Specifies a pixel type for the returned data. 
            The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,
            GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV,
            GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer pixels for glGetnTexImage and glGetTextureImage functions.
            </param>
            <param name="pixels">
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            You can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetnUniform(System.UInt32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer params.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDepthRange(System.Single,System.Single)">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates.
            </summary>
            <param name="n">
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. 
            </param>
            <param name="f">
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetShaderPrecisionFormat(System.UInt32,System.UInt32,System.Int32[],System.Int32@)">
            <summary>
            retrieve the range and precision for numeric formats supported by the shader compiler.
            </summary>
            <param name="shadertype">
            Specifies the type of shader whose precision to query. 
            shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
            </param>
            <param name="precisiontype">
            Specifies the numeric format whose precision and range to query. 
            </param>
            <param name="range">
            Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned. 
            </param>
            <param name="precision">
            Specifies the address of an integer into which the numeric precision of the implementation is written. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glReleaseShaderCompiler">
            <summary>
            release resources consumed by the implementation's shader compiler
            </summary>
        </member>
        <member name="M:OpenGL.GL.glShaderBinary(System.Int32,System.UInt32[],System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            load pre-compiled shader binaries.
            </summary>
            <param name="count">
            Specifies the number of shader object handles contained in shaders. 
            </param>
            <param name="shaders">
            Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
            </param>
            <param name="binaryformat">
            Specifies the format of the shader binaries contained in binary. 
            </param>
            <param name="binary">
            Specifies the address of an array of bytes containing pre-compiled binary shader code.
            you can use the function GLAUX.GetArrayPointer to get the array pointer.
            </param>
            <param name="length">
            Specifies the length of the array whose address is given in binary. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMemoryBarrierByRegion(System.Int32)">
             <summary>
             defines a barrier ordering memory transactions.
             </summary>
             <param name="barriers">
             Specifies the barriers to insert. 
             Only the barrier bits: GL_ATOMIC_COUNTER_BARRIER_BIT, GL_FRAMEBUFFER_BARRIER_BIT ,
            GL_SHADER_IMAGE_ACCESS_BARRIER_BIT ,GL_SHADER_STORAGE_BARRIER_BIT, GL_TEXTURE_FETCH_BARRIER_BIT ,
            GL_UNIFORM_BARRIER_BIT are supported.
             </param>
        </member>
        <member name="M:OpenGL.GL.glDrawArraysInstancedBaseInstance(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32)">
             <summary>
             draw multiple instances of a range of elements with offset applied to instanced attributes
             </summary>
             <param name="mode">
            Specifies what kind of primitives to render.
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,
            GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, 
            GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
             </param>
             <param name="first">
             Specifies the starting index in the enabled arrays. 
             </param>
             <param name="count">
             Specifies the number of indices to be rendered.
             </param>
             <param name="primcount">
             Specifies the number of instances of the specified range of indices to be rendered. 
             </param>
             <param name="baseinstance">
             Specifies the base instance for use in fetching instanced vertex attributes. 
             </param>
        </member>
        <member name="M:OpenGL.GL.glDrawElementsInstancedBaseInstance(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            draw multiple instances of a set of elements with offset applied to instanced attributes.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices.
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the specified range of indices to be rendered.
            </param>
            <param name="baseinstance">
            Specifies the base instance for use in fetching instanced vertex attributes. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawElementsInstancedBaseVertexBaseInstance(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>
            render multiple instances of a set of primitives from array data with a per-element offset.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY,
            GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the indexed geometry that should be drawn. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
            <param name="baseinstance">
            Specifies the base instance for use in fetching instanced vertex attributes.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindFragDataLocationIndexed(System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            bind a user-defined varying out variable to a fragment shader color number and index.
            </summary>
            <param name="program">
            The name of the program containing varying out variable whose binding to modify .
            </param>
            <param name="colorNumber">
            The color number to bind the user-defined varying out variable to .
            </param>
            <param name="index">
            The index of the color input to bind the user-defined varying out variable to .
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose binding to modify .
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetFragDataIndex(System.UInt32,System.Byte[])">
            <summary>
            query the bindings of color indices to user-defined varying out variables.
            </summary>
            <param name="program">
            The name of the program containing varying out variable whose binding to query .
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose index to query .
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glBufferStorage(System.UInt32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            creates and initializes a buffer object's immutable data store.
            </summary>
            <param name="target">
             Specifies the target to which the buffer object is bound for glBufferStorage, which must be one of the buffer binding targets in the following table: 
             GL_ARRAY_BUFFER,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,GL_DISPATCH_INDIRECT_BUFFER,
             GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER ,
             GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER,GL_UNIFORM_BUFFER .
            </param>
            <param name="size">
            Specifies the size in bytes of the buffer object's new data store.
            </param>
            <param name="data">
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </param>
            <param name="flags">
            Specifies the intended usage of the buffer's data store. 
            Must be a bitwise combination of the following flags. 
            GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearBufferData(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill a buffer object's data store with a fixed value.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound for glClearBufferData, 
            which must must be one of the buffer binding targets in the following table: 
            GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER ,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,
            GL_DISPATCH_INDIRECT_BUFFER ,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,GL_PIXEL_PACK_BUFFER ,
            GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,GL_TEXTURE_BUFFER ,
            GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data. 
            </param>
            <param name="type">
            The type of the data in memory addressed by data. 
            </param>
            <param name="data">
            The address of a memory location storing the data to be replicated into the buffer's data store. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill all or part of buffer object's data store with a fixed value
            </summary>
            <param name="target">
             Specifies the target to which the buffer object is bound for glClearBufferSubData,
             which must be one of the buffer binding targets in the following table: 
             GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER,GL_COPY_WRITE_BUFFER ,
             GL_DISPATCH_INDIRECT_BUFFER,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,
             GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,
             GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER,GL_UNIFORM_BUFFER .
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="offset">
            The offset in basic machine units into the buffer object's data store at which to start filling. 
            </param>
            <param name="size">
            The size in basic machine units of the range of the data store to fill. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data. 
            </param>
            <param name="type">
            The type of the data in memory addressed by data.
            </param>
            <param name="data">
            The address of a memory location storing the data to be replicated into the buffer's data store. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearNamedBufferData(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill a buffer object's data store with a fixed value.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glClearNamedBufferData. 
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data.
            </param>
            <param name="type">
            The type of the data in memory addressed by data. 
            </param>
            <param name="data">
             The address of a memory location storing the data to be replicated into the buffer's data store.
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearNamedBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill all or part of buffer object's data store with a fixed value
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glClearNamedBufferSubData. 
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="offset">
            The offset in basic machine units into the buffer object's data store at which to start filling.
            </param>
            <param name="size">
            The size in basic machine units of the range of the data store to fill. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data. 
            </param>
            <param name="type">
            The type of the data in memory addressed by data. 
            </param>
            <param name="data">
            The address of a memory location storing the data to be replicated into the buffer's data store. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearTexImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fills all a texture image with a constant value.
            </summary>
            <param name="texture">
            The name of an existing texture object containing the image to be cleared. 
            </param>
            <param name="level">
            The level of texture containing the region to be cleared. 
            </param>
            <param name="format">
            The format of the data whose address in memory is given by data.
            </param>
            <param name="type">
            The type of the data whose address in memory is given by data. 
            </param>
            <param name="data">
            The address in memory of the data to be used to clear the specified region.
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearTexSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fills all or part of a texture image with a constant value.
            </summary>
            <param name="texture">
            The name of an existing texture object containing the image to be cleared. 
            </param>
            <param name="level">
            The level of texture containing the region to be cleared.
            </param>
            <param name="xoffset">
            The coordinate of the left edge of the region to be cleared. 
            </param>
            <param name="yoffset">
            The coordinate of the lower edge of the region to be cleared. 
            </param>
            <param name="zoffset">
            The coordinate of the front of the region to be cleared. 
            </param>
            <param name="width">
            The width of the region to be cleared. 
            </param>
            <param name="height">
            The height of the region to be cleared. 
            </param>
            <param name="depth">
            The depth of the region to be cleared.
            </param>
            <param name="format">
            The format of the data whose address in memory is given by data.
            </param>
            <param name="type">
            The type of the data whose address in memory is given by data. 
            </param>
            <param name="data">
            The address in memory of the data to be used to clear the specified region.
            </param>
        </member>
        <member name="M:OpenGL.GL.glClipControl(System.UInt32,System.UInt32)">
            <summary>
            control clip coordinate to window coordinate behavior.
            </summary>
            <param name="origin">
            Specifies the clip control origin.Must be one of GL_LOWER_LEFT or GL_UPPER_LEFT.
            </param>
            <param name="depth">
            Specifies the clip control depth mode. Must be one of GL_NEGATIVE_ONE_TO_ONE or GL_ZERO_TO_ONE. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDispatchCompute(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            launch one or more compute work groups.
            </summary>
            <param name="num_groups_x">
            The number of work groups to be launched in the X dimension. 
            </param>
            <param name="num_groups_y">
            The number of work groups to be launched in the Y dimension. 
            </param>
            <param name="num_groups_z">
            The number of work groups to be launched in the Z dimension. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDispatchComputeIndirect(System.Int32)">
            <summary>
            launch one or more compute work groups using parameters stored in a buffer.
            </summary>
            <param name="indirect">
            The offset into the buffer object currently bound to the GL_DISPATCH_INDIRECT_BUFFER buffer target at which the dispatch parameters are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy all or part of the data store of a buffer object to the data store of another buffer object.
            </summary>
            <param name="readtarget">
            Specifies the target to which the source buffer object is bound for glCopyBufferSubData .
            </param>
            <param name="writetarget">
            Specifies the target to which the destination buffer object is bound for glCopyBufferSubData. 
            </param>
            <param name="readoffset">
            Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read. 
            </param>
            <param name="writeoffset">
            Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written. 
            </param>
            <param name="size">
            Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyImageSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            perform a raw data copy between two images.
            </summary>
            <param name="srcName">
            The name of a texture or renderbuffer object from which to copy. 
            </param>
            <param name="srcTarget">
            The target representing the namespace of the source name srcName.
            </param>
            <param name="srcLevel">
            The mipmap level to read from the source. 
            </param>
            <param name="srcX">
            The X coordinate of the left edge of the souce region to copy. 
            </param>
            <param name="srcY">
            The Y coordinate of the top edge of the souce region to copy. 
            </param>
            <param name="srcZ">
            The Z coordinate of the near edge of the souce region to copy. 
            </param>
            <param name="dstName">
            The name of a texture or renderbuffer object to which to copy. 
            </param>
            <param name="dstTarget">
            The target representing the namespace of the destination name dstName. 
            </param>
            <param name="dstLevel">
            The X coordinate of the left edge of the destination region. 
            </param>
            <param name="dstX">
            The Y coordinate of the top edge of the destination region. 
            </param>
            <param name="dstY">
            The Z coordinate of the near edge of the destination region. 
            </param>
            <param name="dstZ">
            The width of the region to be copied. 
            </param>
            <param name="srcWidth">
            The width of the region to be copied. 
            </param>
            <param name="srcHeight">
            The height of the region to be copied. 
            </param>
            <param name="srcDepth">
            The depth of the region to be copied. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDebugMessageCallback(System.IntPtr,System.IntPtr)">
            <summary>
            specify a callback to receive debugging messages from the GL.
            </summary>
            <param name="callback">
            The address of a callback function that will be called when a debug message is generated. 
            </param>
            <param name="userParam">
            A user supplied pointer that will be passed on each invocation of callback. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDebugMessageControl(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.Boolean)">
            <summary>
            control the reporting of debug messages in a debug context.
            </summary>
            <param name="source">
            The source of debug messages to enable or disable. 
            </param>
            <param name="type">
            The type of debug messages to enable or disable. 
            </param>
            <param name="severity">
            The severity of debug messages to enable or disable. 
            </param>
            <param name="count">
            The length of the array ids. 
            </param>
            <param name="ids">
            The address of an array of unsigned integers contianing the ids of the messages to enable or disable. 
            </param>
            <param name="enabled">
            A Boolean flag determining whether the selected messages should be enabled or disabled. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDebugMessageInsert(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Byte[])">
            <summary>
             inject an application-supplied message into the debug message queue.
            </summary>
            <param name="source">
            The source of the debug message to insert. 
            </param>
            <param name="type">
            The type of the debug message insert. 
            </param>
            <param name="id">
            The user-supplied identifier of the message to insert. 
            </param>
            <param name="severity">
            The severity of the debug messages to insert. 
            </param>
            <param name="length">
            The length string contained in the character array whose address is given by message. 
            </param>
            <param name="buf">
            The character array containing the message to insert. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetDebugMessageLog(System.UInt32,System.Int32,System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32[],System.Int32[],System.Byte[])">
            <summary>
            retrieve messages from the debug message log.
            </summary>
            <param name="count">
            The number of debug messages to retrieve from the log. 
            </param>
            <param name="bufSize">
            The size of the buffer whose address is given by messageLog. 
            </param>
            <param name="sources">
             The array of variables to receive the sources of the retrieved messages.
            </param>
            <param name="types">
            The array of variables to receive the types of the retrieved messages. 
            </param>
            <param name="ids">
            The array of unsigned integers to receive the ids of the retrieved messages. 
            </param>
            <param name="severities">
            The array of variables to receive the severites of the retrieved messages. 
            </param>
            <param name="lengths">
            The array of variables to receive the lengths of the received messages.
            </param>
            <param name="messageLog">
            The array of characters that will receive the messages. 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glBindTextureUnit(System.UInt32,System.UInt32)">
            <summary>
            bind an existing texture object to the specified texture unit .
            </summary>
            <param name="unit">
            Specifies the texture unit, to which the texture object should be bound to.
            </param>
            <param name="texture">
            Specifies the name of a texture. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlitNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            copy a block of pixels from one framebuffer object to another.
            </summary>
            <param name="readFramebuffer">
            Specifies the name of the source framebuffer object for glBlitNamedFramebuffer. 
            </param>
            <param name="drawFramebuffer">
            Specifies the name of the destination framebuffer object for glBlitNamedFramebuffer.
            </param>
            <param name="srcX0">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY0">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="srcX1">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY1">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="dstX0">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            </param>
            <param name="dstY0">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            </param>
            <param name="dstX1">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            </param>
            <param name="dstY1">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            </param>
            <param name="mask">
            The bitwise OR of the flags indicating which buffers are to be copied. 
            The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT. 
            </param>
            <param name="filter">
            Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCheckNamedFramebufferStatus(System.UInt32,System.UInt32)">
            <summary>
            check the completeness status of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glCheckNamedFramebufferStatus .
            </param>
            <param name="target">
            Specify the target to which the framebuffer is bound for glCheckFramebufferStatus, 
            and the target against which framebuffer completeness of framebuffer is checked for glCheckNamedFramebufferStatus. 
            </param>
            <returns>
            return the completeness status of a framebuffer object .
            </returns>
        </member>
        <member name="M:OpenGL.GL.glClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Single,System.Int32)">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="depth">
            The value to clear the depth buffer to. 
            </param>
            <param name="stencil">
            The value to clear the stencil buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Single[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
             Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
             Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Int32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
             Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
             Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
             Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
             Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTextureSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
             <summary>
            specify a one-dimensional texture subimage in a compressed format.
             </summary>
             <param name="texture">
             Specifies the texture object name for glCompressedTextureSubImage1D function.
             </param>
             <param name="level">
             Specifies the level-of-detail number.
             Level 0 is the base image level. Level n is the nth mipmap reduction image.
             </param>
             <param name="xoffset">
             Specifies a texel offset in the x direction within the texture array.
             </param>
             <param name="width">
             Specifies the width of the texture subimage.
             </param>
             <param name="format">
             Specifies the format of the compressed image data stored at address data.
             </param>
             <param name="imageSize">
             Specifies the number of unsigned bytes of image data starting at the address specified by data.
             </param>
             <param name="data">
             Specifies a pointer to the compressed image data in memory.
             </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTextureSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture subimage in a compressed format.
            </summary>
            <param name="texture">
            Specifies the texture object name for glCompressedTextureSubImage2D function.
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data.
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCompressedTextureSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage in a compressed format.
            </summary>
            <param name="texture">
            Specifies the texture object name for glCompressedTextureSubImage3D function.
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data.
            </param>
            <param name="imageSize">
             Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyNamedBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy all or part of the data store of a buffer object to the data store of another buffer object.
            </summary>
            <param name="readBuffer">
            Specifies the name of the source buffer object for glCopyNamedBufferSubData. 
            </param>
            <param name="writeBuffer">
            Specifies the name of the destination buffer object for glCopyNamedBufferSubData. 
            </param>
            <param name="readOffset">
            Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read. 
            </param>
            <param name="writeOffset">
            Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written. 
            </param>
            <param name="size">
            Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTextureSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a one-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for glCopyTextureSubImage1D function.
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level. 
            Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies the texel offset within the texture array.
            </param>
            <param name="x">
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTextureSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a two-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for glCopyTextureSubImage2D function.
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyTextureSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             copy a three-dimensional texture subimage.
             </summary>
             <param name="texture">
             Specifies the texture object name for glCopyTextureSubImage3D function.
             </param>
             <param name="level">
             Specifies the level-of-detail number. Level 0 is the base image level.
             Level n is the nth mipmap reduction image.
             </param>
             <param name="xoffset">
             Specifies a texel offset in the x direction within the texture array.
             </param>
             <param name="yoffset">
             Specifies a texel offset in the y direction within the texture array.
             </param>
             <param name="zoffset">
             Specifies a texel offset in the z direction within the texture array.
             </param>
             <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
             </param>
             <param name="y">
             Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
             </param>
             <param name="width">
             Specifies the width of the texture subimage.
             </param>
             <param name="height">
             Specifies the height of the texture subimage.
             </param>
        </member>
        <member name="M:OpenGL.GL.glCreateBuffers(System.Int32,System.UInt32[])">
            <summary>
            create buffer objects.
            </summary>
            <param name="n">
            Specifies the number of buffer objects to create. 
            </param>
            <param name="buffers">
            Specifies an array in which names of the new buffer objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateFramebuffers(System.Int32,System.UInt32[])">
            <summary>
            create framebuffer objects.
            </summary>
            <param name="n">
            Number of framebuffer objects to create.
            </param>
            <param name="framebuffers">
            Specifies an array in which names of the new framebuffer objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateProgramPipelines(System.Int32,System.UInt32[])">
            <summary>
            create program pipeline objects.
            </summary>
            <param name="n">
            Number of program pipeline objects to create. 
            </param>
            <param name="pipelines">
            Specifies an array in which names of the new program pipeline objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateQueries(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            create query objects.
            </summary>
            <param name="target">
            Specifies the target of each created query object. 
            </param>
            <param name="n">
            Number of query objects to create. 
            </param>
            <param name="ids">
            Specifies an array in which names of the new query objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateRenderbuffers(System.Int32,System.UInt32[])">
            <summary>
            create renderbuffer objects.
            </summary>
            <param name="n">
            Number of renderbuffer objects to create. 
            </param>
            <param name="renderbuffers">
            Specifies an array in which names of the new renderbuffer objects are stored.
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateSamplers(System.Int32,System.UInt32[])">
            <summary>
            create sampler objects.
            </summary>
            <param name="n">
            Number of sampler objects to create. 
            </param>
            <param name="samplers">
            Specifies an array in which names of the new sampler objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateTextures(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            create texture objects.
            </summary>
            <param name="target">
            Specifies the effective texture target of each created texture. 
            </param>
            <param name="n">
            Number of texture objects to create. 
            </param>
            <param name="textures">
            Specifies an array in which names of the new texture objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateTransformFeedbacks(System.Int32,System.UInt32[])">
            <summary>
            create transform feedback objects.
            </summary>
            <param name="n">
            Number of transform feedback objects to create. 
            </param>
            <param name="ids">
            Specifies an array in which names of the new transform feedback objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateVertexArrays(System.Int32,System.UInt32[])">
            <summary>
            create vertex array objects.
            </summary>
            <param name="n">
            Number of vertex array objects to create. 
            </param>
            <param name="arrays">
            Specifies an array in which names of the new vertex array objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDisableVertexArrayAttrib(System.UInt32,System.UInt32)">
            <summary>
            disable a generic vertex attribute array.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for glDisableVertexArrayAttrib and glEnableVertexArrayAttrib functions.
            </param>
            <param name="index">
            Specifies the index of the generic vertex attribute to be disabled.
            </param>
        </member>
        <member name="M:OpenGL.GL.glEnableVertexArrayAttrib(System.UInt32,System.UInt32)">
            <summary>
            enable a generic vertex attribute array.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for glDisableVertexArrayAttrib and glEnableVertexArrayAttrib functions.
            </param>
            <param name="index">
            Specifies the index of the generic vertex attribute to be enabled.
            </param>
        </member>
        <member name="M:OpenGL.GL.glFlushMappedNamedBufferRange(System.UInt32,System.Int32,System.Int32)">
            <summary>
            indicate modifications to a range of a mapped buffer.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glFlushMappedNamedBufferRange.
            </param>
            <param name="offset">
            Specifies the start of the buffer subrange, in basic machine units. 
            </param>
            <param name="length">
            Specifies the length of the buffer subrange, in basic machine units. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenerateTextureMipmap(System.UInt32)">
            <summary>
            generate mipmaps for a specified texture object.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGenerateTextureMipmap. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetCompressedTextureImage(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            return a compressed texture image.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGetCompressedTextureImage function.
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level n
            is the n-th mipmap reduction image.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer pixels for glGetCompressedTextureImage and glGetnCompressedTexImage functions.
            </param>
            <param name="pixels">
            Returns the compressed texture image.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetNamedBufferParameter(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glGetNamedBufferParameteriv and glGetNamedBufferParameteri64v. 
            </param>
            <param name="pname">
            specific buffer object parameter.
            </param>
            <param name="Params">
            Returns the requested parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetNamedBufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glGetNamedBufferParameteriv and glGetNamedBufferParameteri64v. 
            </param>
            <param name="pname">
            specific buffer object parameter.
            </param>
            <param name="Params">
            Returns the requested parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetNamedBufferPointer(System.UInt32,System.UInt32,System.IntPtr[])">
            <summary>
            return the pointer to a mapped buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glGetNamedBufferPointerv. 
            </param>
            <param name="pname">
            Specifies the name of the pointer to be returned. Must be GL_BUFFER_MAP_POINTER. 
            </param>
            <param name="Params">
            Returns the pointer value specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetNamedBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            returns a subset of a buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glGetNamedBufferSubData. 
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes. 
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being returned. 
            </param>
            <param name="data">
            Specifies a pointer to the location where buffer object data is returned. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetNamedFramebufferAttachmentParameter(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve information about attachments of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glGetNamedFramebufferAttachmentParameteriv. 
            </param>
            <param name="attachment">
            Specifies the attachment of the framebuffer object to query. 
            </param>
            <param name="pname">
            Specifies the parameter of attachment to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for attachment. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetNamedFramebufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a named parameter of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glGetNamedFramebufferParameteriv. 
            </param>
            <param name="pname">
            Specifies the parameter of the framebuffer object to query. 
            </param>
            <param name="param">
            Returns the value of parameter pname for the framebuffer object.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetNamedRenderbufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a named parameter of a renderbuffer object.
            </summary>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object for glGetNamedRenderbufferParameteriv. 
            </param>
            <param name="pname">
            Specifies the parameter of the renderbuffer object to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for the renderbuffer object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryBufferObjecti64v(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryBufferObjectiv(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryBufferObjectui64v(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryBufferObjectuiv(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            return a texture image.
            </summary>
            <param name="texture">
            Specifies the texture object name. 
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level.
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="format">
            Specifies a pixel format for the returned data. 
            The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, 
            GL_RED, GL_GREEN, GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER,
            GL_GREEN_INTEGER, GL_BLUE_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, 
            GL_BGR_INTEGER, GL_BGRA_INTEGER.
            </param>
            <param name="type">
            Specifies a pixel type for the returned data. 
            The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,
            GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, 
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,
            GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV,
            GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer pixels for glGetnTexImage and glGetTextureImage functions.
            </param>
            <param name="pixels">
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Single[])">
            <summary>
            return texture parameter values for a specific level of detail.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGetTextureLevelParameterfv and glGetTextureLevelParameteriv functions.
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,
            GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE,
            GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, 
            and GL_TEXTURE_BUFFER_OFFSET are accepted.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values for a specific level of detail.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGetTextureLevelParameterfv and glGetTextureLevelParameteriv functions.
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,
            GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE,
            GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, 
            and GL_TEXTURE_BUFFER_OFFSET are accepted.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGetTextureParameterfv, glGetTextureParameteriv, glGetTextureParameterIiv, and glGetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGetTextureParameterfv, glGetTextureParameteriv, glGetTextureParameterIiv, and glGetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGetTextureParameterfv, glGetTextureParameteriv, glGetTextureParameterIiv, and glGetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for glGetTextureParameterfv, glGetTextureParameteriv, glGetTextureParameterIiv, and glGetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTransformFeedback(System.UInt32,System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            query the state of a transform feedback object.
            </summary>
            <param name="xfb">
            The name of an existing transform feedback object, or zero for the default transform feedback object.
            </param>
            <param name="pname">
            Property to use for the query. 
            Must be one of the values: GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, GL_TRANSFORM_FEEDBACK_BUFFER_START,
            GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, GL_TRANSFORM_FEEDBACK_PAUSED, GL_TRANSFORM_FEEDBACK_ACTIVE.
            </param>
            <param name="index">
            Index of the transform feedback stream (for indexed state).
            </param>
            <param name="param">
            The address of a buffer into which will be written the requested state information.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTransformFeedback(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query the state of a transform feedback object.
            </summary>
            <param name="xfb">
            The name of an existing transform feedback object, or zero for the default transform feedback object.
            </param>
            <param name="pname">
            Property to use for the query. 
            Must be one of the values: GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, GL_TRANSFORM_FEEDBACK_BUFFER_START,
            GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, GL_TRANSFORM_FEEDBACK_PAUSED, GL_TRANSFORM_FEEDBACK_ACTIVE.
            </param>
            <param name="index">
            Index of the transform feedback stream (for indexed state).
            </param>
            <param name="param">
            The address of a buffer into which will be written the requested state information.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTransformFeedback(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query the state of a transform feedback object.
            </summary>
            <param name="xfb">
            The name of an existing transform feedback object, or zero for the default transform feedback object.
            </param>
            <param name="pname">
            Property to use for the query. 
            Must be one of the values: GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, GL_TRANSFORM_FEEDBACK_BUFFER_START,
            GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, GL_TRANSFORM_FEEDBACK_PAUSED, GL_TRANSFORM_FEEDBACK_ACTIVE.
            </param>
            <param name="param">
            The address of a buffer into which will be written the requested state information.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexArrayIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            retrieve parameters of an attribute of a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of a vertex array object.
            </param>
            <param name="index">
            Specifies the index of the vertex array object attribute. 
            Must be a number between 0 and (GL_MAX_VERTEX_ATTRIBS - 1).
            </param>
            <param name="pname">
            Specifies the property to be used for the query. 
            For glGetVertexArrayIndexediv, it must be one of the following values: 
            GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, 
            GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, 
            GL_VERTEX_ATTRIB_ARRAY_LONG, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_VERTEX_ATTRIB_RELATIVE_OFFSET. 
            For glGetVertexArrayIndexed64v, it must be equal to GL_VERTEX_BINDING_OFFSET.
            </param>
            <param name="param">
            Returns the requested value.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexArrayIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve parameters of an attribute of a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of a vertex array object.
            </param>
            <param name="index">
            Specifies the index of the vertex array object attribute. 
            Must be a number between 0 and (GL_MAX_VERTEX_ATTRIBS - 1).
            </param>
            <param name="pname">
            Specifies the property to be used for the query. 
            For glGetVertexArrayIndexediv, it must be one of the following values: 
            GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, 
            GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, 
            GL_VERTEX_ATTRIB_ARRAY_LONG, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_VERTEX_ATTRIB_RELATIVE_OFFSET. 
            For glGetVertexArrayIndexed64v, it must be equal to GL_VERTEX_BINDING_OFFSET.
            </param>
            <param name="param">
            Returns the requested value.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetVertexArrayiv(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve parameters of a vertex array object.
            </summary>
            <param name="vaobj">
            specifies the name of the vertex array object to use for the query.
            </param>
            <param name="pname">
            Name of the property to use for the query.Must be GL_ELEMENT_ARRAY_BUFFER_BINDING.
            </param>
            <param name="param">
            Returns the requested value.
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateNamedFramebufferData(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            invalidate the content of some or all of a framebuffer's attachments.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glInvalidateNamedFramebufferData. 
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array. 
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateNamedFramebufferSubData(System.UInt32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            invalidate the content of a region of some or all of a framebuffer's attachments.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glInvalidateNamedFramebufferSubData. .
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array.
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated.
            </param>
            <param name="x">
            Specifies the X offset of the region to be invalidated. 
            </param>
            <param name="y">
            Specifies the Y offset of the region to be invalidated. 
            </param>
            <param name="width">
            Specifies the width of the region to be invalidated. 
            </param>
            <param name="height">
            Specifies the height of the region to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMapNamedBuffer(System.UInt32,System.UInt32)">
            <summary>
            map all of a buffer object's data store into the client's address space.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glMapNamedBuffer. 
            </param>
            <param name="access">
            Specifies the access policy for glMapBuffer and glMapNamedBuffer,
            indicating whether it will be possible to read from, write to, 
            or both read from and write to the buffer object's mapped data store.
            The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glMapNamedBufferRange(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            map all or part of a buffer object's data store into the client's address space.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glMapNamedBufferRange. 
            </param>
            <param name="offset">
            Specifies the starting offset within the buffer of the range to be mapped. 
            </param>
            <param name="length">
            Specifies the length of the range to be mapped. 
            </param>
            <param name="access">
            Specifies a combination of access flags indicating the desired access to the mapped range. 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glNamedBufferData(System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            creates and initializes a buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glNamedBufferData function.
            </param>
            <param name="size">
             Specifies the size in bytes of the buffer object's new data store.
            </param>
            <param name="data">
             Specifies a pointer to data that will be copied into the data store for initialization, 
             or NULL if no data is to be copied.
            </param>
            <param name="usage">
            Specifies the expected usage pattern of the data store. 
            The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, 
            GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedBufferStorage(System.UInt32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            creates and initializes a buffer object's immutable data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glNamedBufferStorage function.
            </param>
            <param name="size">
            Specifies the size in bytes of the buffer object's new data store.
            </param>
            <param name="data">
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </param>
            <param name="flags">
              Specifies the intended usage of the buffer's data store. 
              Must be a bitwise combination of the following flags. GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT ,
              GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            updates a subset of a buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glNamedBufferSubData. 
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being replaced.
            </param>
            <param name="data">
            Specifies a pointer to the new data that will be copied into the data store. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedFramebufferDrawBuffer(System.UInt32,System.UInt32)">
            <summary>
            specify which color buffers are to be drawn into.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glNamedFramebufferDrawBuffer function.
            Must be zero or the name of a framebuffer object.
            </param>
            <param name="mode">
            For default framebuffer, the argument specifies up to four color buffers to be drawn into. 
            Symbolic constants GL_NONE, GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, 
            GL_BACK, GL_LEFT, GL_RIGHT, and GL_FRONT_AND_BACK are accepted. 
            The initial value is GL_FRONT for single-buffered contexts, and GL_BACK for double-buffered contexts.
            For framebuffer objects, GL_COLOR_ATTACHMENT$m$ and GL_NONE enums are accepted, where $m$ is a value between 0 and GL_MAX_COLOR_ATTACHMENTS.
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedFramebufferDrawBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Specifies a list of color buffers to be drawn into.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glNamedFramebufferDrawBuffers.
            </param>
            <param name="n">
            Specifies the number of buffers in bufs.
            </param>
            <param name="bufs">
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedFramebufferParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set a named parameter of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glNamedFramebufferParameteri. 
            </param>
            <param name="pname">
            Specifies the framebuffer parameter to be modified. 
            </param>
            <param name="param">
            The new value for the parameter named pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedFramebufferReadBuffer(System.UInt32,System.UInt32)">
            <summary>
            select a color buffer source for pixels.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glNamedFramebufferReadBuffer function.
            </param>
            <param name="mode">
            Specifies a color buffer. 
            Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, 
            GL_BACK, GL_LEFT, GL_RIGHT, and the constants GL_COLOR_ATTACHMENTi.
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedFramebufferRenderbuffer(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a renderbuffer as a logical buffer of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glNamedFramebufferRenderbuffer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="renderbuffertarget">
            Specifies the renderbuffer target. Must be GL_RENDERBUFFER. 
            </param>
            <param name="renderbuffer">
            Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedFramebufferTexture(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glNamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedFramebufferTextureLayer(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a single layer of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for glNamedFramebufferTextureLayer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach.
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
            <param name="layer">
            Specifies the layer of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedRenderbufferStorage(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format and dimensions of a renderbuffer object's image.
            </summary>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object for glNamedRenderbufferStorage function.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels.
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.GL.glNamedRenderbufferStorageMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format, dimensions and sample count of a renderbuffer object's image.
            </summary>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object for glNamedRenderbufferStorageMultisample function.
            </param>
            <param name="samples">
            Specifies the number of samples to be used for the renderbuffer object's storage.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels.
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureBuffer(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a buffer object's data store to a buffer texture object.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureBuffer. 
            </param>
            <param name="internalformat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a range of a buffer object's data store to a buffer texture object.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureBufferRange. 
            </param>
            <param name="internalformat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
            <param name="offset">
            Specifies the offset of the start of the range of the buffer's data store to attach. 
            </param>
            <param name="size">
             Specifies the size of the range of the buffer's data store to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL,
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A,
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(glTexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="Params">
            For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL,
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A,
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(glTexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="Params">
            For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(glTexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(glTexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(glTexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a single-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(glTexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureStorage1D(System.UInt32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a one-dimensional texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureStorage1D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureStorage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureStorage2D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureStorage2DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureStorage2DMultisample. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image,
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureStorage3D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a three-dimensional, 
            two-dimensional array or cube-map array texture
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureStorage3D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
            <param name="depth">
            Specifies the depth of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureStorage3DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample array texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureStorage3DMultisample.
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture.
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
            <param name="depth">
            Specifies the depth of the texture, in layers.
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, 
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureSubImage1D. 
            The effective target of texture must be one of the valid target values above. 
            </param>
            <param name="level">
             Specifies the level-of-detail number.Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureSubImage2D. 
            The effective target of texture must be one of the valid target values above. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data.
            The following symbolic values are accepted: 
            GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            </param>
            <param name="type">
            Specifies the data type of the pixel data.
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for glTextureSubImage3D. 
            The effective target of texture must be one of the valid target values above. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. The following symbolic values are accepted: 
            GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. The following symbolic values are accepted:
            GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT,
            GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, 
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, 
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8,
            GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTransformFeedbackBufferBase(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            bind a buffer object to a transform feedback buffer object.
            </summary>
            <param name="xfb">
            Name of the transform feedback buffer object. 
            </param>
            <param name="index">
            Index of the binding point within xfb.
            </param>
            <param name="buffer">
            Name of the buffer object to bind to the specified binding point. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTransformFeedbackBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            bind a range within a buffer object to a transform feedback buffer object.
            </summary>
            <param name="xfb">
            Name of the transform feedback buffer object. 
            </param>
            <param name="index">
            Index of the binding point within xfb. 
            </param>
            <param name="buffer">
            Name of the buffer object to bind to the specified binding point. 
            </param>
            <param name="offset">
            The starting offset in basic machine units into the buffer object. 
            </param>
            <param name="size">
            The amount of data in basic machine units that can be read from or written to the buffer object while used as an indexed target. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUnmapNamedBuffer(System.UInt32)">
            <summary>
            release the mapping of a buffer object's data store into the client's address space.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for glUnmapNamedBuffer. 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayAttribBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            associate a vertex attribute and a vertex buffer binding for a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for glVertexArrayAttribBinding. 
            </param>
            <param name="attribindex">
            The index of the attribute to associate with a vertex buffer binding. 
            </param>
            <param name="bindingindex">
            The index of the vertex buffer binding with which to associate the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayAttribFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for glVertexArrayAttrib{I, L}Format functions.
            </param>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="normalized">
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed. 
            This parameter is ignored if type is GL_FIXED. 
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayAttribIFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for glVertexArrayAttrib{I, L}Format functions.
            </param>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayAttribLFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for glVertexArrayAttrib{I, L}Format functions.
            </param>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayBindingDivisor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            modify the rate at which generic vertex attributes advance.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for glVertexArrayBindingDivisor function.
            </param>
            <param name="bindingindex">
            The index of the binding whose divisor to modify.
            </param>
            <param name="divisor">
            The new value for the instance step rate to apply.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayElementBuffer(System.UInt32,System.UInt32)">
            <summary>
            configures element array buffer binding of a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object to use for the element array buffer binding. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayVertexBuffer(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vaobj">
            
            </param>
            <param name="bindingindex">
            
            </param>
            <param name="buffer">
            
            </param>
            <param name="offset">
            
            </param>
            <param name="stride">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayVertexBuffers(System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.Int32[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="vaobj"></param>
            <param name="first"></param>
            <param name="count"></param>
            <param name="buffers"></param>
            <param name="offsets"></param>
            <param name="strides"></param>
        </member>
        <member name="M:OpenGL.GL.glDrawBuffers(System.Int32,System.UInt32[])">
            <summary>
            Specifies a list of color buffers to be drawn into.
            </summary>
            <param name="n">
            Specifies the number of buffers in bufs.
            </param>
            <param name="bufs">
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawElementsBaseVertex(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, 
            GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawElementsInstancedBaseVertex(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY,
            GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the indexed geometry that should be drawn. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawRangeElementsBaseVertex(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            render primitives from array data with a per-element offset
            </summary>
            <param name="mode">
             Specifies what kind of primitives to render.
             Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
             GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY,
             GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            </param>
            <param name="start">
            Specifies the minimum array index contained in indices. 
            </param>
            <param name="end">
            Specifies the maximum array index contained in indices. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiDrawElementsBaseVertex(System.UInt32,System.Int32[],System.UInt32,System.IntPtr[],System.Int32,System.Int32[])">
            <summary>
            render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY,
            GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Points to an array of the elements counts. 
            </param>
            <param name="type">
            Specifies the type of the values in indices.
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the size of the count, indices and basevertex arrays. 
            </param>
            <param name="basevertex">
            Specifies a pointer to the location where the base vertices are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawArraysIndirect(System.UInt32,OpenGL.DrawArraysIndirectCommand@)">
            <summary>
            render primitives from array data, taking parameters from memory
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY,
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="indirect">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawElementsIndirect(System.UInt32,System.UInt32,OpenGL.DrawElementsIndirectCommand@)">
            <summary>
            render indexed primitives from array data, taking parameters from memory
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY,
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="type">
            Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
            </param>
            <param name="indirect">
            Specifies the address of a structure containing the draw parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set a named parameter of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for glFramebufferParameteri. 
            </param>
            <param name="pname">
            Specifies the framebuffer parameter to be modified. 
            </param>
            <param name="param">
            The new value for the parameter named pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetFramebufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a named parameter of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is bound for glGetFramebufferParameteriv. 
            </param>
            <param name="pname">
            Specifies the parameter of the framebuffer object to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for the framebuffer object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindFramebuffer(System.UInt32,System.UInt32)">
            <summary>
            bind a named buffer object.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound, which must be one of the buffer binding targets in the following table: 
            GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,GL_DISPATCH_INDIRECT_BUFFER ,
            GL_DRAW_INDIRECT_BUFFER,GL_DRAW_INDIRECT_BUFFER,GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER,
            GL_QUERY_BUFFER,GL_SHADER_STORAGE_BUFFER,GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .
            </param>
            <param name="framebuffer">
            Specifies the name of a buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindRenderbuffer(System.UInt32,System.UInt32)">
            <summary>
            bind a renderbuffer to a renderbuffer target.
            </summary>
            <param name="target">
            Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER. 
            </param>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object to bind. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBlitFramebuffer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            copy a block of pixels from one framebuffer object to another.
            </summary>
            <param name="srcX0">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY0">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="srcX1">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY1">
            Specify the bounds of the source rectangle within the read buffer of the read framebuffer. 
            </param>
            <param name="dstX0">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer. 
            </param>
            <param name="dstY0">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer. 
            </param>
            <param name="dstX1">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer. 
            </param>
            <param name="dstY1">
            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer. 
            </param>
            <param name="mask">
            The bitwise OR of the flags indicating which buffers are to be copied.
            The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT. 
            </param>
            <param name="filter">
            Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCheckFramebufferStatus(System.UInt32)">
            <summary>
            check the completeness status of a framebuffer.
            </summary>
            <param name="target">
            Specify the target to which the framebuffer is bound for glCheckFramebufferStatus, 
            and the target against which framebuffer completeness of framebuffer is checked for glCheckNamedFramebufferStatus. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glDeleteFramebuffers(System.Int32,System.UInt32[])">
            <summary>
            delete framebuffer objects.
            </summary>
            <param name="n">
            Specifies the number of framebuffer objects to be deleted.
            </param>
            <param name="framebuffers">
             An array containing n framebuffer objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteRenderbuffers(System.Int32,System.UInt32[])">
            <summary>
            delete renderbuffer objects.
            </summary>
            <param name="n">
            Specifies the number of renderbuffer objects to be deleted. 
            </param>
            <param name="renderbuffers">
            An array containing n renderbuffer objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferRenderbuffer(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a renderbuffer as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for glFramebufferRenderbuffer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="renderbuffertarget">
            Specifies the name of the framebuffer object for glNamedFramebufferRenderbuffer. 
            </param>
            <param name="renderbuffer">
            Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferTexture1D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for all commands except glNamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="textarget">
            For glFramebufferTexture1D, glFramebufferTexture2D and glFramebufferTexture3D, 
            specifies what type of texture is expected in the texture parameter, or for cube map textures, 
            which face is to be attached. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferTexture2D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for all commands except glNamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="textarget">
            For glFramebufferTexture1D, glFramebufferTexture2D and glFramebufferTexture3D, 
            specifies what type of texture is expected in the texture parameter, or for cube map textures, 
            which face is to be attached. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferTexture3D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for all commands except glNamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="textarget">
            For glFramebufferTexture1D, glFramebufferTexture2D and glFramebufferTexture3D, 
            specifies what type of texture is expected in the texture parameter, or for cube map textures, 
            which face is to be attached. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
            <param name="layer">
            layer specifies the layer of a 2-dimensional image within a 3-dimensional texture. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferTextureLayer(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a single layer of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for glFramebufferTextureLayer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
            <param name="layer">
            Specifies the layer of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenFramebuffers(System.Int32,System.UInt32[])">
            <summary>
            generate framebuffer object names.
            </summary>
            <param name="n">
            Specifies the number of framebuffer object names to generate. 
            </param>
            <param name="framebuffers">
            Specifies an array in which the generated framebuffer object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenRenderbuffers(System.Int32,System.UInt32[])">
            <summary>
            generate framebuffer object names.
            </summary>
            <param name="n">
            Specifies the number of framebuffer object names to generate.
            </param>
            <param name="renderbuffers">
            Specifies an array in which the generated framebuffer object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenerateMipmap(System.UInt32)">
            <summary>
            generate mipmaps for a specified texture object.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for glGenerateMipmap. 
            Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, 
            GL_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_MAP, or GL_TEXTURE_CUBE_MAP_ARRAY. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetFramebufferAttachmentParameter(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve information about attachments of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is bound for glGetFramebufferAttachmentParameteriv.
            </param>
            <param name="attachment">
            Specifies the attachment of the framebuffer object to query. 
            </param>
            <param name="pname">
            Specifies the parameter of attachment to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for attachment. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetRenderbufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
             query a named parameter of a renderbuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the renderbuffer object is bound for glGetRenderbufferParameteriv.
            target must be GL_RENDERBUFFER. 
            </param>
            <param name="pname">
            Specifies the parameter of the renderbuffer object to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for the renderbuffer object.
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsFramebuffer(System.UInt32)">
            <summary>
            determine if a name corresponds to a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies a value that may be the name of a framebuffer object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glIsRenderbuffer(System.UInt32)">
            <summary>
            determine if a name corresponds to a renderbuffer object.
            </summary>
            <param name="renderbuffer">
            Specifies a value that may be the name of a renderbuffer object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glRenderbufferStorage(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format and dimensions of a renderbuffer object's image.
            </summary>
            <param name="target">
            Specifies a binding target of the allocation for glRenderbufferStorage function. Must be GL_RENDERBUFFER.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.GL.glRenderbufferStorageMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format, dimensions and sample count of a renderbuffer object's image.
            </summary>
            <param name="target">
            Specifies a binding target of the allocation for glRenderbufferStorageMultisample function. 
            Must be GL_RENDERBUFFER.
            </param>
            <param name="samples">
            Specifies the number of samples to be used for the renderbuffer object's storage.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels.
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.GL.glFramebufferTextureFace(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="target">
            
            </param>
            <param name="attachment">
            
            </param>
            <param name="texture">
            
            </param>
            <param name="level">
            
            </param>
            <param name="face">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            specify a parameter for a program object.
            </summary>
            <param name="program">
            Specifies the name of a program object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the name of the parameter to modify. 
            </param>
            <param name="value">
            Specifies the new value of the parameter specified by pname for program. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramBinary(System.UInt32,System.Int32,System.Int32@,System.UInt32@,System.IntPtr)">
            <summary>
            return a binary representation of a program object's compiled and linked executable source.
            </summary>
            <param name="program">
            Specifies the name of a program object whose binary representation to retrieve. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer whose address is given by binary. 
            </param>
            <param name="length">
            Specifies the address of a variable to receive the number of bytes written into binary. 
            </param>
            <param name="binaryFormat">
            Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL. 
            </param>
            <param name="binary">
            Specifies the address an array into which the GL will return program's binary representation. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramBinary(System.UInt32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            load a program object with a program binary.
            </summary>
            <param name="program">
             Specifies the name of a program object into which to load a program binary.
            </param>
            <param name="binaryFormat">
            Specifies the format of the binary data in binary. 
            </param>
            <param name="binary">
            Specifies the address an array containing the binary to be loaded into program. 
            </param>
            <param name="length">
            Specifies the number of bytes contained in binary. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetCompressedTextureSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            retrieve a sub-region of a compressed texture image from a compressed texture object.
            </summary>
            <param name="texture">
            Specifies the name of the source texture object.
            Must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, 
            GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY or GL_TEXTURE_RECTANGLE.
            In specific, buffer and multisample textures are not permitted.
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            Must be a multiple of the compressed block's width, 
            unless the offset is zero and the size equals the texture image size.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            Must be a multiple of the compressed block's height, 
            unless the offset is zero and the size equals the texture image size.
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage.
            Must be a multiple of the compressed block's depth, 
            unless the offset is zero and the size equals the texture image size.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer to receive the retrieved pixel data.
            </param>
            <param name="pixels">
            Returns the texture subimage. Should be a pointer to an array of the type specified by type.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetTextureSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            retrieve a sub-region of a texture image from a texture object.
            </summary>
            <param name="texture">
            Specifies the name of the source texture object.
            Must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, 
            GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY or GL_TEXTURE_RECTANGLE. 
            In specific, buffer and multisample textures are not permitted.
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: 
            GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT and GL_STENCIL_INDEX.
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT,
            GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV,
            GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer to receive the retrieved pixel data.
            </param>
            <param name="pixels">
             Returns the texture subimage.Should be a pointer to an array of the type specified by type.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetUniform(System.UInt32,System.Int32,System.Double[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform1(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform2(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform3(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniform4(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix2(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix2x3(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix2x4(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix3(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix3x2(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix3x4(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix4(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix4x2(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformMatrix4x3(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(glUniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorSubTable(System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            respecify a portion of a color table.
            </summary>
            <param name="target">
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="start">
            The starting index of the portion of the color table to be replaced. 
            </param>
            <param name="count">
            The number of table entries to replace. 
            </param>
            <param name="format">
            The format of the pixel data in data.
            The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE,
            GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA. 
            </param>
            <param name="type">
            The type of the pixel data in data.
            The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="data">
            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorTable(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            define a color lookup table.
            </summary>
            <param name="target">
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE,
            GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="internalformat">
            The internal format of the color table. 
            The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE,
            GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, 
            GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, 
            GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5,
            GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16. 
            </param>
            <param name="width">
            The number of entries in the color lookup table specified by data. 
            </param>
            <param name="format">
            The format of the pixel data in data. 
            The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </param>
            <param name="type">
            The type of the pixel data in data.
            The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, 
            GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV,
            GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="table">
            Pointer to a one-dimensional array of pixel data that is processed to build the color table. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorTableParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set color lookup table parameters.
            </summary>
            <param name="target">
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="pname">
            The symbolic name of a texture color lookup table parameter. 
            Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS. 
            </param>
            <param name="Params">
            A pointer to an array where the values of the parameters are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glColorTableParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set color lookup table parameters.
            </summary>
            <param name="target">
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="pname">
            The symbolic name of a texture color lookup table parameter. 
            Must be one of GL_COLOR_TABLE_SCALE or GL_COLOR_TABLE_BIAS. 
            </param>
            <param name="Params">
            A pointer to an array where the values of the parameters are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glConvolutionFilter1D(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            define a one-dimensional convolution filter.
            </summary>
            <param name="target">
            Must be GL_CONVOLUTION_1D. 
            </param>
            <param name="internalformat">
            The internal format of the convolution filter kernel.
            The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE,
            GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, 
            GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, 
            GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16,
            GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, 
            GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="width">
            The width of the pixel array referenced by data. 
            </param>
            <param name="format">
            The format of the pixel data in data.
            The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA. 
            </param>
            <param name="type">
            The type of the pixel data in data. 
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,
            GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, 
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1,
            GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="image">
            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glConvolutionFilter2D(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            define a two-dimensional convolution filter.
            </summary>
            <param name="target">
            Must be GL_CONVOLUTION_2D. 
            </param>
            <param name="internalformat">
            The internal format of the convolution filter kernel.
            The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE,
            GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, 
            GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, 
            GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16,
            GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, 
            GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="width">
            The width of the pixel array referenced by data. 
            </param>
            <param name="height">
            The height of the pixel array referenced by data. 
            </param>
            <param name="format">
            The format of the pixel data in data. 
            The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, 
            GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            The type of the pixel data in data.
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,
            GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, 
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1,
            GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="image">
            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glConvolutionParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set convolution parameters.
            </summary>
            <param name="target">
            The target for the convolution parameter. 
            Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D. 
            </param>
            <param name="pname">
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE. 
            </param>
            <param name="Params">
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glConvolutionParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set convolution parameters.
            </summary>
            <param name="target">
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D. 
            </param>
            <param name="pname">
            The parameter to be set. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR,
            GL_CONVOLUTION_FILTER_SCALE, or GL_CONVOLUTION_FILTER_BIAS. 
            </param>
            <param name="Params">
            The parameter value. If pnamev is GL_CONVOLUTION_BORDER_MODE, paramsv must be one of GL_REDUCE, GL_CONSTANT_BORDER, or GL_REPLICATE_BORDER.
            Otherwise, must be a vector of four values (for red, green, blue, and alpha, respectively) to be used for scaling (when pnamev is GL_CONVOLUTION_FILTER_SCALE), 
            or biasing (when pnamev is GL_CONVOLUTION_FILTER_BIAS) a convolution filter kernel or setting the constant border color (when pnamev is GL_CONVOLUTION_BORDER_COLOR. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glConvolutionParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set convolution parameters.
            </summary>
            <param name="target">
            The target for the convolution parameter. 
            Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D. 
            </param>
            <param name="pname">
            The parameter to be set. Must be GL_CONVOLUTION_BORDER_MODE. 
            </param>
            <param name="Params">
            The parameter value. Must be one of GL_REDUCE, GL_CONSTANT_BORDER, GL_REPLICATE_BORDER. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glConvolutionParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set convolution parameters.
            </summary>
            <param name="target">
            The target for the convolution parameter. Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D. 
            </param>
            <param name="pname">
            The parameter to be set. Must be one of GL_CONVOLUTION_BORDER_MODE, GL_CONVOLUTION_BORDER_COLOR,
            GL_CONVOLUTION_FILTER_SCALE, or GL_CONVOLUTION_FILTER_BIAS. 
            </param>
            <param name="Params">
            The parameter value. If pnamev is GL_CONVOLUTION_BORDER_MODE, paramsv must be one of GL_REDUCE, GL_CONSTANT_BORDER, or GL_REPLICATE_BORDER.
            Otherwise, must be a vector of four values (for red, green, blue, and alpha, respectively) to be used for scaling (when pnamev is GL_CONVOLUTION_FILTER_SCALE), 
            or biasing (when pnamev is GL_CONVOLUTION_FILTER_BIAS) a convolution filter kernel or setting the constant border color (when pnamev is GL_CONVOLUTION_BORDER_COLOR. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyColorSubTable(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            respecify a portion of a color table.
            </summary>
            <param name="target">
            Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="start">
            The starting index of the portion of the color table to be replaced. 
            </param>
            <param name="x">
            The window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="y">
            The window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="width">
            The number of table entries to replace. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyColorTable(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy pixels into a color table.
            </summary>
            <param name="target">
            The color table target.
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="internalformat">
            The internal storage format of the texture image. 
            Must be one of the following symbolic constants: 
            GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, 
            GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2,
            GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY,
            GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5,
            GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="x">
            The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table. 
            </param>
            <param name="y">
            The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table. 
            </param>
            <param name="width">
            The width of the pixel rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyConvolutionFilter1D(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy pixels into a one-dimensional convolution filter.
            </summary>
            <param name="target">
            Must be GL_CONVOLUTION_1D. 
            </param>
            <param name="internalformat">
            The internal format of the convolution filter kernel. 
            The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, 
            GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4,
            GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, 
            GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, 
            GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4,
            GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="x">
            The window space coordinates of the lower-left coordinate of the pixel array to copy. 
            </param>
            <param name="y">
            The window space coordinates of the lower-left coordinate of the pixel array to copy. 
            </param>
            <param name="width">
            The width of the pixel array to copy. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCopyConvolutionFilter2D(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy pixels into a two-dimensional convolution filter.
            </summary>
            <param name="target">
            Must be GL_CONVOLUTION_2D. 
            </param>
            <param name="internalformat">
            The internal format of the convolution filter kernel.
            The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16,
            GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, 
            GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8,
            GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, 
            GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, 
            GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4,
            GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="x">
            The window space coordinates of the lower-left coordinate of the pixel array to copy. 
            </param>
            <param name="y">
            The window space coordinates of the lower-left coordinate of the pixel array to copy. 
            </param>
            <param name="width">
            The width of the pixel array to copy. 
            </param>
            <param name="height">
            The height of the pixel array to copy. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetColorTable(System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            retrieve contents of a color lookup table.
            </summary>
            <param name="target">
            Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="format">
            The format of the pixel data in table. 
            The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE,
            GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA. 
            </param>
            <param name="type">
            The type of the pixel data in table. 
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, 
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="table">
            Pointer to a one-dimensional array of pixel data containing the contents of the color table. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetColorTableParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            get color lookup table parameters.
            </summary>
            <param name="target">
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE,
            GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, 
            or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="pname">
            The symbolic name of a color lookup table parameter. 
            Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, 
            GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE,
            GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE. 
            </param>
            <param name="Params">
            An array where the values of the parameter will be stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetColorTableParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            get color lookup table parameters.
            </summary>
            <param name="target">
            The target color table. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE,
            GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, 
            or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE. 
            </param>
            <param name="pname">
            The symbolic name of a color lookup table parameter. 
            Must be one of GL_COLOR_TABLE_BIAS, GL_COLOR_TABLE_SCALE, GL_COLOR_TABLE_FORMAT, 
            GL_COLOR_TABLE_WIDTH, GL_COLOR_TABLE_RED_SIZE, GL_COLOR_TABLE_GREEN_SIZE, GL_COLOR_TABLE_BLUE_SIZE,
            GL_COLOR_TABLE_ALPHA_SIZE, GL_COLOR_TABLE_LUMINANCE_SIZE, or GL_COLOR_TABLE_INTENSITY_SIZE. 
            </param>
            <param name="Params">
            An array where the values of the parameter will be stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetConvolutionFilter(System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            get current 1D or 2D convolution filter kernel.
            </summary>
            <param name="target">
            The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D. 
            </param>
            <param name="format">
            Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, 
            GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Data type of components in the output image. 
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, 
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="image">
            Pointer to storage for the output image. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetConvolutionParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            get convolution parameters.
            </summary>
            <param name="target">
            The filter whose parameters are to be retrieved. 
            Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D. 
            </param>
            <param name="pname">
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, 
            GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS,
            GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT. 
            </param>
            <param name="Params">
            Pointer to storage for the parameters to be retrieved. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetConvolutionParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            get convolution parameters.
            </summary>
            <param name="target">
            The filter whose parameters are to be retrieved. 
            Must be one of GL_CONVOLUTION_1D, GL_CONVOLUTION_2D, or GL_SEPARABLE_2D. 
            </param>
            <param name="pname">
            The parameter to be retrieved. Must be one of GL_CONVOLUTION_BORDER_MODE, 
            GL_CONVOLUTION_BORDER_COLOR, GL_CONVOLUTION_FILTER_SCALE, GL_CONVOLUTION_FILTER_BIAS,
            GL_CONVOLUTION_FORMAT, GL_CONVOLUTION_WIDTH, GL_CONVOLUTION_HEIGHT, GL_MAX_CONVOLUTION_WIDTH, or GL_MAX_CONVOLUTION_HEIGHT. 
            </param>
            <param name="Params">
            Pointer to storage for the parameters to be retrieved. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetHistogram(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            get histogram table.
            </summary>
            <param name="target">
            Must be GL_HISTOGRAM. 
            </param>
            <param name="reset">
            If GL_TRUE, each component counter that is actually returned is reset to zero.(Other counters are unaffected.) 
            If GL_FALSE, none of the counters in the histogram table is modified. 
            </param>
            <param name="format">
            The format of values to be returned in values. 
            Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA,
            GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
            </param>
            <param name="type">
            The type of values to be returned in values.
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, 
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="values">
            A pointer to storage for the returned histogram table. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetHistogramParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            get histogram parameters.
            </summary>
            <param name="target">
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM. 
            </param>
            <param name="pname">
            The name of the parameter to be retrieved.
            Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE,
            GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK. 
            </param>
            <param name="Params">
            Pointer to storage for the returned values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetHistogramParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            get histogram parameters.
            </summary>
            <param name="target">
            Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM. 
            </param>
            <param name="pname">
            The name of the parameter to be retrieved.
            Must be one of GL_HISTOGRAM_WIDTH, GL_HISTOGRAM_FORMAT, GL_HISTOGRAM_RED_SIZE, GL_HISTOGRAM_GREEN_SIZE,
            GL_HISTOGRAM_BLUE_SIZE, GL_HISTOGRAM_ALPHA_SIZE, GL_HISTOGRAM_LUMINANCE_SIZE, or GL_HISTOGRAM_SINK. 
            </param>
            <param name="Params">
            Pointer to storage for the returned values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMinmax(System.UInt32,System.Boolean,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            get minimum and maximum pixel values.
            </summary>
            <param name="target">
            Must be GL_MINMAX. 
            </param>
            <param name="reset">
            If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) 
            If GL_FALSE, the minmax table is unaltered. 
            </param>
            <param name="format">
            The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB,
            GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA. 
            </param>
            <param name="types">
            The type of the data to be returned in values.
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, 
            GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5,
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, 
            GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="values">
            A pointer to storage for the returned values. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMinmaxParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            get minmax parameters.
            </summary>
            <param name="target">
            Must be GL_MINMAX. 
            </param>
            <param name="pname">
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK. 
            </param>
            <param name="Params">
            A pointer to storage for the retrieved parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMinmaxParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            get minmax parameters.
            </summary>
            <param name="target">
            Must be GL_MINMAX. 
            </param>
            <param name="pname">
            The parameter to be retrieved. Must be one of GL_MINMAX_FORMAT or GL_MINMAX_SINK. 
            </param>
            <param name="Params">
            A pointer to storage for the retrieved parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetSeparableFilter(System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            get separable convolution filter kernel images.
            </summary>
            <param name="target">
            The separable filter to be retrieved. Must be GL_SEPARABLE_2D. 
            </param>
            <param name="format">
            Format of the output images.
            Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGRGL_RGBA,
            GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            Data type of components in the output images. 
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, 
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="row">
            Pointer to storage for the row filter image. 
            </param>
            <param name="column">
            Pointer to storage for the column filter image. 
            </param>
            <param name="span">
            Pointer to storage for the span filter image (currently unused). 
            </param>
        </member>
        <member name="M:OpenGL.GL.glHistogram(System.UInt32,System.Int32,System.UInt32,System.Boolean)">
            <summary>
            define histogram table.
            </summary>
            <param name="target">
            The histogram whose parameters are to be set. Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM. 
            </param>
            <param name="width">
            The number of entries in the histogram table. Must be a power of 2. 
            </param>
            <param name="internalformat">
            The format of entries in the histogram table. 
            Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE,
            GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4,
            GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12,
            GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12,
            GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="sink">
            If GL_TRUE, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. 
            If GL_FALSE, pixels will proceed to the minmax process after histogramming. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMinmax(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            define minmax table.
            </summary>
            <param name="target">
            The minmax table whose parameters are to be set. Must be GL_MINMAX. 
            </param>
            <param name="internalformat">
            The format of entries in the minmax table.
            Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, 
            GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, 
            GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8,
            GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB,
            GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, 
            GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="sink">
            If GL_TRUE, pixels will be consumed by the minmax process and no drawing or texture loading will take place.
            If GL_FALSE, pixels will proceed to the final conversion process after minmax. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glResetHistogram(System.UInt32)">
            <summary>
            reset histogram table entries to zero.
            </summary>
            <param name="target">
            Must be GL_HISTOGRAM. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glResetMinmax(System.UInt32)">
            <summary>
            reset minmax table entries to initial values.
            </summary>
            <param name="target">
            Must be GL_MINMAX. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSeparableFilter2D(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            define a separable two-dimensional convolution filter.
            </summary>
            <param name="target">
            Must be GL_SEPARABLE_2D. 
            </param>
            <param name="internalformat">
            The internal format of the convolution filter kernel. 
            The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, 
            GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, 
            GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,
            GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, 
            GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, 
            GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16. 
            </param>
            <param name="width">
            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
            </param>
            <param name="height">
            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.) 
            </param>
            <param name="format">
            The format of the pixel data in row and column. 
            The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, 
            GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. 
            </param>
            <param name="type">
            The type of the pixel data in row and column.
            Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, 
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,
            and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. 
            </param>
            <param name="row">
            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel. 
            </param>
            <param name="column">
            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetInternalformat(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32[])">
            <summary>
             retrieve information about implementation-dependent support for internal formats.
            </summary>
            <param name="target">
            Indicates the usage of the internal format. target must be GL_RENDERBUFFER.
            </param>
            <param name="internalformat">
            Specifies the internal format about which to retrieve information.
            </param>
            <param name="pname">
            Specifies the type of information to query.
            </param>
            <param name="bufSize">
            Specifies the maximum number of integers that may be written to params by the function.
            </param>
            <param name="Params">
            Specifies the address of a variable into which to write the retrieved information.
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateBufferData(System.UInt32)">
            <summary>
            invalidate the content of a buffer object's data store.
            </summary>
            <param name="buffer">
            The name of a buffer object whose data store to invalidate. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateBufferSubData(System.UInt32,System.Int32,System.Int32)">
            <summary>
            invalidate a region of a buffer object's data store.
            </summary>
            <param name="buffer">
            The name of a buffer object, a subrange of whose data store to invalidate.
            </param>
            <param name="offset">
            The offset within the buffer's data store of the start of the range to be invalidated. 
            </param>
            <param name="length">
            The length of the range within the buffer's data store to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateFramebuffer(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            invalidate the content of some or all of a framebuffer's attachments.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is attached for glInvalidateFramebuffer. 
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array. 
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateSubFramebuffer(System.UInt32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            invalidate the content of a region of some or all of a framebuffer's attachments.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is attached for glInvalidateSubFramebuffer.
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array. 
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated. 
            </param>
            <param name="x">
            Specifies the X offset of the region to be invalidated. 
            </param>
            <param name="y">
            Specifies the Y offset of the region to be invalidated. 
            </param>
            <param name="width">
            Specifies the width of the region to be invalidated. 
            </param>
            <param name="height">
            Specifies the height of the region to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateTexImage(System.UInt32,System.Int32)">
            <summary>
            invalidate the entirety a texture image.
            </summary>
            <param name="texture">
            The name of a texture object to invalidate. 
            </param>
            <param name="level">
             The level of detail of the texture object to invalidate.
            </param>
        </member>
        <member name="M:OpenGL.GL.glInvalidateTexSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            invalidate a region of a texture image.
            </summary>
            <param name="texture">
            The name of a texture object a subregion of which to invalidate. 
            </param>
            <param name="level">
            The level of detail of the texture object within which the region resides.
            </param>
            <param name="xoffset">
            The X offset of the region to be invalidated. 
            </param>
            <param name="yoffset">
            The Y offset of the region to be invalidated. 
            </param>
            <param name="zoffset">
            The Z offset of the region to be invalidated. 
            </param>
            <param name="width">
            The width of the region to be invalidated. 
            </param>
            <param name="height">
            The height of the region to be invalidated.
            </param>
            <param name="depth">
            The depth of the region to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFlushMappedBufferRange(System.UInt32,System.Int32,System.Int32)">
            <summary>
            indicate modifications to a range of a mapped buffer.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound for glFlushMappedBufferRange, 
            which must be one of the buffer binding targets in the following table: 
            GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,
            GL_DISPATCH_INDIRECT_BUFFER ,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,
            GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,
            GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .
            </param>
            <param name="offset">
            Specifies the start of the buffer subrange, in basic machine units. 
            </param>
            <param name="length">
            Specifies the length of the buffer subrange, in basic machine units. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMapBufferRange(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            map all or part of a buffer object's data store into the client's address space.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound for glMapBufferRange, 
            which must be one of the buffer binding targets in the following table: 
            GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER ,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER,
            GL_DISPATCH_INDIRECT_BUFFER ,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,
            GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,
            GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER,GL_UNIFORM_BUFFER .
            </param>
            <param name="offset">
            Specifies the starting offset within the buffer of the range to be mapped.
            </param>
            <param name="length">
            Specifies the length of the range to be mapped.
            </param>
            <param name="access">
            Specifies a combination of access flags indicating the desired access to the mapped range.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindBuffersBase(System.UInt32,System.UInt32,System.Int32,System.UInt32[])">
            <summary>
             bind one or more buffer objects to a sequence of indexed buffer targets
            </summary>
            <param name="target">
            Specify the target of the bind operation. 
            target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, 
            GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER. 
            </param>
            <param name="first">
            Specify the index of the first binding point within the array specified by target. 
            </param>
            <param name="count">
            Specify the number of contiguous binding points to which to bind buffers. 
            </param>
            <param name="buffers">
            A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindBuffersRange(System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.Int32[],System.Int32[])">
            <summary>
            bind ranges of one or more buffer objects to a sequence of indexed buffer targets.
            </summary>
            <param name="target">
            Specify the target of the bind operation. 
            target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, 
            GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER. 
            </param>
            <param name="first">
            Specify the index of the first binding point within the array specified by target. 
            </param>
            <param name="count">
            Specify the number of contiguous binding points to which to bind buffers.
            </param>
            <param name="buffers">
            A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL. 
            </param>
            <param name="offsets">
            A pointer to an array of offsets into the corresponding buffer in buffers to bind, or NULL if buffers is NULL. 
            </param>
            <param name="sizes">
            A pointer to an array of sizes of the corresponding buffer in buffers to bind, or NULL if buffers is NULL.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindImageTextures(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            bind one or more named texture images to a sequence of consecutive image units.
            </summary>
            <param name="first">
            Specifies the first image unit to which a texture is to be bound. 
            </param>
            <param name="count">
            Specifies the number of textures to bind. 
            </param>
            <param name="textures">
            Specifies the address of an array of names of existing texture objects. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindSamplers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            bind one or more named sampler objects to a sequence of consecutive sampler units.
            </summary>
            <param name="first">
            Specifies the first sampler unit to which a sampler object is to be bound. 
            </param>
            <param name="count">
            Specifies the number of samplers to bind.
            </param>
            <param name="samplers">
            Specifies the address of an array of names of existing sampler objects. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindTextures(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            bind one or more named textures to a sequence of consecutive texture units.
            </summary>
            <param name="first">
            Specifies the first texture unit to which a texture is to be bound. 
            </param>
            <param name="count">
            Specifies the number of textures to bind. 
            </param>
            <param name="textures">
            Specifies the address of an array of names of existing texture objects. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindVertexBuffers(System.UInt32,System.Int32,System.UInt32[],System.Int32[],System.Int32[])">
            <summary>
            attach multiple buffer objects to a vertex array object.
            </summary>
            <param name="first">
            Specifies the first vertex buffer binding point to which a buffer object is to be bound. 
            </param>
            <param name="count">
            Specifies the number of buffers to bind. 
            </param>
            <param name="buffers">
            Specifies the address of an array of names of existing buffer objects. 
            </param>
            <param name="offsets">
            Specifies the address of an array of offsets to associate with the binding points. 
            </param>
            <param name="strides">
            Specifies the address of an array of strides to associate with the binding points. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiDrawArraysIndirect(System.UInt32,OpenGL.DrawArraysIndirectCommand@,System.Int32,System.Int32)">
            <summary>
            render multiple sets of primitives from array data, taking parameters from memory.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY,
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="indirect">
            Specifies the address of an array of structures containing the draw parameters. 
            </param>
            <param name="primcount">
            Specifies the the number of elements in the array of draw parameter structures. 
            </param>
            <param name="stride">
            Specifies the distance in basic machine units between elements of the draw parameter array.
            </param>
        </member>
        <member name="M:OpenGL.GL.glMultiDrawElementsIndirect(System.UInt32,System.UInt32,OpenGL.DrawElementsIndirectCommand@,System.Int32,System.Int32)">
            <summary>
            render indexed primitives from array data, taking parameters from memory.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render.
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
            </param>
            <param name="type">
            Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding. 
            </param>
            <param name="indirect">
            Specifies the address of a structure containing an array of draw parameters. 
            </param>
            <param name="primcount">
            Specifies the number of elements in the array addressed by indirect. 
            </param>
            <param name="stride">
            Specifies the distance in basic machine units between elements of the draw parameter array. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPolygonOffsetClamp(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="factor">
            
            </param>
            <param name="units">
            
            </param>
            <param name="clamp">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramInterface(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a property of an interface in a program.
            </summary>
            <param name="program">
            The name of a program object whose interface to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program to query.
            </param>
            <param name="pname">
            The name of the parameter within programInterface to query. 
            </param>
            <param name="Params">
            The address of a variable to retrieve the value of pname for the program interface. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramResourceIndex(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            query the index of a named resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name.
            </param>
            <param name="name">
            The name of the resource to query the index of. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetProgramResourceLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            query the location of a named resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name. 
            </param>
            <param name="name">
            The name of the resource to query the location of. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetProgramResourceLocationIndex(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            query the location of a named resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name. 
            </param>
            <param name="name">
            The name of the resource to query the location of.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetProgramResourceName(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an indexed resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the indexed resource. 
            </param>
            <param name="index">
            The index of the resource within programInterface of program. 
            </param>
            <param name="bufSize">
            The size of the character array whose address is given by name. 
            </param>
            <param name="length">
            The address of a variable which will receive the length of the resource name. 
            </param>
            <param name="name">
            The address of a character array into which will be written the name of the resource. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramResource(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.Int32,System.Int32@,System.Int32)">
            <summary>
            retrieve values for multiple properties of a single active resource within a program object.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name. 
            </param>
            <param name="index">
            
            </param>
            <param name="propCount">
            
            </param>
            <param name="props">
            
            </param>
            <param name="bufSize">
            
            </param>
            <param name="length">
            
            </param>
            <param name="Params">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glProvokingVertex(System.UInt32)">
            <summary>
            specifiy the vertex to be used as the source of data for flat shaded varyings.
            </summary>
            <param name="mode">
            Specifies the vertex to be used as the source of data for flat shaded varyings. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindSampler(System.UInt32,System.UInt32)">
            <summary>
             bind a named sampler to a texturing target.
            </summary>
            <param name="unit">
            Specifies the index of the texture unit to which the sampler is bound. 
            </param>
            <param name="sampler">
            Specifies the name of a sampler. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteSamplers(System.Int32,System.UInt32[])">
            <summary>
            delete named sampler objects.
            </summary>
            <param name="count">
            Specifies the number of sampler objects to be deleted. 
            </param>
            <param name="samplers">
            Specifies an array of sampler objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenSamplers(System.Int32,System.UInt32[])">
            <summary>
            generate sampler object names.
            </summary>
            <param name="count">
            Specifies the number of sampler object names to generate. 
            </param>
            <param name="samplers">
            Specifies an array in which the generated sampler object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetSamplerParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetSamplerParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetSamplerParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetSamplerParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsSampler(System.UInt32)">
            <summary>
            determine if a name corresponds to a sampler object.
            </summary>
            <param name="sampler">
            Specifies a value that may be the name of a sampler object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glSamplerParameterIi(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSamplerParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (glSamplerParameter*v),
            specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSamplerParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.         /// </param>
            <param name="param">
            For the scalar commands, specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSamplerParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (glSamplerParameter*v),
            specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSamplerParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.         /// </param>
            <param name="param">
            For the scalar commands, specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSamplerParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (glSamplerParameter*v),
            specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glActiveShaderProgram(System.UInt32,System.UInt32)">
            <summary>
            set the active program object for a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies the program pipeline object to set the active program object for. 
            </param>
            <param name="program">
            Specifies the program object to set as the active program pipeline object pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindProgramPipeline(System.UInt32)">
            <summary>
            bind a program pipeline to the current context.
            </summary>
            <param name="pipeline">
            Specifies the name of the pipeline object to bind to the context. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glCreateShaderProgram(System.UInt32,System.Int32,System.IntPtr[])">
            <summary>
            create a stand-alone program from an array of null-terminated source code strings.
            </summary>
            <param name="type">
            Specifies the type of shader to create. 
            </param>
            <param name="count">
            Specifies the number of source code strings in the array strings. 
            </param>
            <param name="strings">
            Specifies the address of an array of pointers to source code strings from which to create the program object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glDeleteProgramPipelines(System.Int32,System.UInt32[])">
            <summary>
            delete program pipeline objects.
            </summary>
            <param name="n">
            Specifies the number of program pipeline objects to delete.
            </param>
            <param name="pipelines">
            Specifies an array of names of program pipeline objects to delete. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenProgramPipelines(System.Int32,System.UInt32[])">
            <summary>
            reserve program pipeline object names.
            </summary>
            <param name="n">
            Specifies the number of program pipeline object names to reserve. 
            </param>
            <param name="pipelines">
            Specifies an array of into which the reserved names will be written. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramPipelineInfoLog(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            retrieve the info log string from a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies the name of a program pipeline object from which to retrieve the info log. 
            </param>
            <param name="bufSize">
            Specifies the maximum number of characters, including the null terminator, that may be written into infoLog. 
            </param>
            <param name="length">
            Specifies the address of a variable into which will be written the number of characters written into infoLog. 
            </param>
            <param name="infoLog">
            Specifies the address of an array of characters into which will be written the info log for pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramPipeline(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve properties of a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies the name of a program pipeline object whose parameter retrieve. 
            </param>
            <param name="pname">
            Specifies the name of the parameter to retrieve. 
            </param>
            <param name="Params">
            Specifies the address of a variable into which will be written the value or values of pname for pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsProgramPipeline(System.UInt32)">
            <summary>
            determine if a name corresponds to a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies a value that may be the name of a program pipeline object.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform1(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform2(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform3(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniform4(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix2x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix2x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix2x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix2x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix3x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix3x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix3x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix3x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix4x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix4x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix4x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glProgramUniformMatrix4x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(glProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.GL.glUseProgramStages(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            bind stages of a program object to a program pipeline.
            </summary>
            <param name="pipeline">
            Specifies the program pipeline object to which to bind stages from program.
            </param>
            <param name="stages">
             Specifies a set of program stages to bind to the program pipeline object.
            </param>
            <param name="program">
            Specifies the program object containing the shader executables to use in pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glValidateProgramPipeline(System.UInt32)">
            <summary>
            validate a program pipeline object against current GL state.
            </summary>
            <param name="pipeline">
            Specifies the name of a program pipeline object to validate. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveAtomicCounterBuffer(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve information about the set of active atomic counter buffers for a program.
            </summary>
            <param name="program">
            The name of a program object from which to retrieve information. 
            </param>
            <param name="bufferIndex">
            Specifies index of an active atomic counter buffer. 
            </param>
            <param name="pname">
            Specifies which parameter of the atomic counter buffer to retrieve.
            </param>
            <param name="Params">
            Specifies the address of a variable into which to write the retrieved information.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindImageTexture(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            bind a level of a texture to an image unit.
            </summary>
            <param name="unit">
            Specifies the index of the image unit to which to bind the texture .
            </param>
            <param name="texture">
            Specifies the name of the texture to bind to the image unit. 
            </param>
            <param name="level">
            Specifies the level of the texture that is to be bound. 
            </param>
            <param name="layered">
            Specifies whether a layered texture binding is to be established. 
            </param>
            <param name="layer">
            If layered is GL_FALSE, specifies the layer of texture to be bound to the image unit. Ignored otherwise. 
            </param>
            <param name="access">
            Specifies a token indicating the type of access that will be performed on the image.
            </param>
            <param name="format">
            Specifies the format that the elements of the image will be treated as for the purposes of formatted stores. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glMemoryBarrier(System.Int32)">
            <summary>
            defines a barrier ordering memory transactions.
            </summary>
            <param name="barriers">
            Specifies the barriers to insert. 
            For glMemoryBarrier, must be a bitwise combination of any of GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT,
            GL_ELEMENT_ARRAY_BARRIER_BIT, GL_UNIFORM_BARRIER_BIT, GL_TEXTURE_FETCH_BARRIER_BIT, 
            GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, GL_COMMAND_BARRIER_BIT, GL_PIXEL_BUFFER_BARRIER_BIT, 
            GL_TEXTURE_UPDATE_BARRIER_BIT, GL_BUFFER_UPDATE_BARRIER_BIT, GL_FRAMEBUFFER_BARRIER_BIT, 
            GL_TRANSFORM_FEEDBACK_BARRIER_BIT, GL_ATOMIC_COUNTER_BARRIER_BIT, or GL_SHADER_STORAGE_BARRIER_BIT.
            </param>
        </member>
        <member name="M:OpenGL.GL.glShaderStorageBlockBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            change an active shader storage block binding.
            </summary>
            <param name="program">
            The name of the program containing the block whose binding to change. 
            </param>
            <param name="storageBlockIndex">
            The index storage block within the program. 
            </param>
            <param name="storageBlockBinding">
            The index storage block binding to associate with the specified storage block. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveSubroutineName(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an active shader subroutine.
            </summary>
            <param name="program">
            Specifies the name of the program containing the subroutine. 
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query the subroutine name. 
            </param>
            <param name="index">
            Specifies the index of the shader subroutine uniform. 
            </param>
            <param name="bufsize">
            Specifies the size of the buffer whose address is given in name. 
            </param>
            <param name="length">
            Specifies the address of a variable which is to receive the length of the shader subroutine uniform name. 
            </param>
            <param name="name">
            Specifies the address of an array into which the name of the shader subroutine uniform will be written. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveSubroutineUniformName(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an active shader subroutine uniform
            </summary>
            <param name="program">
            Specifies the name of the program containing the subroutine. 
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for the subroutine parameter.
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="index">
            Specifies the index of the shader subroutine uniform. 
            </param>
            <param name="bufsize">
            Specifies the size of the buffer whose address is given in name.
            </param>
            <param name="length">
            Specifies the address of a variable into which is written the number of characters copied into name. 
            </param>
            <param name="name">
            Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveSubroutineUniform(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a property of an active shader subroutine uniform.
            </summary>
            <param name="program">
            Specifies the name of the program containing the subroutine.
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for the subroutine parameter. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, 
            GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="index">
            Specifies the index of the shader subroutine uniform. 
            </param>
            <param name="pname">
            Specifies the parameter of the shader subroutine uniform to query. 
            pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH. 
            </param>
            <param name="values">
            Specifies the address of a into which the queried value or values will be placed. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramStage(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve properties of a program object corresponding to a specified shader stage.
            </summary>
            <param name="program">
            Specifies the name of the program containing shader stage.
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for the subroutine parameter.
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="pname">
            Specifies the parameter of the shader to query. 
            pname must be GL_ACTIVE_SUBROUTINE_UNIFORMS, GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, 
            GL_ACTIVE_SUBROUTINES, GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, or GL_ACTIVE_SUBROUTINE_MAX_LENGTH. 
            </param>
            <param name="values">
            Specifies the address of a variable into which the queried value or values will be placed. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetSubroutineIndex(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            retrieve the index of a subroutine uniform of a given shader stage within a program.
            </summary>
            <param name="program">
            Specifies the name of the program containing shader stage.
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, 
            GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="name">
            Specifies the name of the subroutine uniform whose index to query. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetSubroutineUniformLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            retrieve the location of a subroutine uniform of a given shader stage within a program.
            </summary>
            <param name="program">
            Specifies the name of the program containing shader stage. 
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index.
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, 
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="name">
            Specifies the name of the subroutine uniform whose index to query. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetUniformSubroutine(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            retrieve the value of a subroutine uniform of a given shader stage of the current program.
            </summary>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="location">
            Specifies the location of the subroutine uniform. 
            </param>
            <param name="Params">
            Specifies the address of a variable to receive the value or values of the subroutine uniform. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformSubroutines(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            load active subroutine uniforms.
            </summary>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="count">
             Specifies the number of uniform indices stored in indices.
            </param>
            <param name="indices">
            Specifies the address of an array holding the indices to load into the shader subroutine variables. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glClientWaitSync(System.IntPtr,System.Int32,System.UInt64)">
            <summary>
            block and wait for a sync object to become signaled.
            </summary>
            <param name="GLsync">
            The sync object whose status to wait on.
            </param>
            <param name="flags">
            A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT. 
            </param>
            <param name="timeout">
            The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glDeleteSync(System.IntPtr)">
            <summary>
            delete a sync object.
            </summary>
            <param name="GLsync">
            The sync object to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glFenceSync(System.UInt32,System.Int32)">
            <summary>
            create a new sync object and insert it into the GL command stream.
            </summary>
            <param name="condition">
            Specifies the condition that must be met to set the sync object's state to signaled.
            condition must be GL_SYNC_GPU_COMMANDS_COMPLETE. 
            </param>
            <param name="flags">
            Specifies a bitwise combination of flags controlling the behavior of the sync object. 
            No flags are presently defined for this operation and flags must be zero.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetInteger(System.UInt32,System.Int64[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned for non-indexed versions of glGet. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetSync(System.IntPtr,System.UInt32,System.Int32,System.Int32@,System.Int32[])">
            <summary>
            query the properties of a sync object.
            </summary>
            <param name="GLsync">
            Specifies the sync object whose properties to query. 
            </param>
            <param name="pname">
            Specifies the parameter whose value to retrieve from the sync object specified in sync. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer whose address is given in values. 
            </param>
            <param name="length">
            Specifies the address of an variable to receive the number of integers placed in values. 
            </param>
            <param name="values">
            Specifies the address of an array to receive the values of the queried parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsSync(System.IntPtr)">
            <summary>
            determine if a name corresponds to a sync object.
            </summary>
            <param name="GLsync">
            Specifies a value that may be the name of a sync object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glWaitSync(System.IntPtr,System.Int32,System.UInt64)">
            <summary>
            instruct the GL server to block until the specified sync object becomes signaled.
            </summary>
            <param name="GLsync">
            Specifies the sync object whose status to wait on. 
            </param>
            <param name="flags">
            A bitfield controlling the command flushing behavior. flags may be zero. 
            </param>
            <param name="timeout">
            Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPatchParameter(System.UInt32,System.Single[])">
            <summary>
            specifies the parameters for patch primitives.
            </summary>
            <param name="pname">
            Specifies the name of the parameter to set. 
            The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted. 
            </param>
            <param name="values">
            Specifies the address of an array containing the new values for the parameter given by pname. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glPatchParameter(System.UInt32,System.Int32)">
            <summary>
            specifies the parameters for patch primitives.
            </summary>
            <param name="pname">
            Specifies the name of the parameter to set. 
            The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted. 
            </param>
            <param name="value">
             Specifies the new value for the parameter given by pname.
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a range of a buffer object's data store to a buffer texture object.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for glTexBufferRange. Must be GL_TEXTURE_BUFFER. 
            </param>
            <param name="internalformat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
            <param name="offset">
            Specifies the offset of the start of the range of the buffer's data store to attach. 
            </param>
            <param name="size">
            Specifies the size of the range of the buffer's data store to attach. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetMultisample(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            retrieve the location of a sample.
            </summary>
            <param name="pname">
            Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION. 
            </param>
            <param name="index">
            Specifies the index of the sample whose position to query. 
            </param>
            <param name="val">
            Specifies the address of an array to receive the position of the sample. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glSampleMask(System.UInt32,System.Int32)">
            <summary>
            set the value of a sub-word of the sample mask.
            </summary>
            <param name="index">
            Specifies which 32-bit sub-word of the sample mask to update. 
            </param>
            <param name="mask">
            Specifies the new value of the mask sub-word. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexImage2DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            establish the data storage, format, dimensions, and number of samples of a multisample texture's image.
            </summary>
            <param name="target">
            Specifies the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE or GL_PROXY_TEXTURE_2D_MULTISAMPLE. 
            </param>
            <param name="samples">
            The number of samples in the multisample texture's image.
            </param>
            <param name="internalformat">
            The internal format to be used to store the multisample texture's image. 
            internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
            </param>
            <param name="width">
            The width of the multisample texture's image, in texels. 
            </param>
            <param name="height">
            The height of the multisample texture's image, in texels. 
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, 
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexImage3DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            establish the data storage, format, dimensions, and number of samples of a multisample texture's image.
            </summary>
            <param name="target">
            Specifies the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE_ARRAY or GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY. 
            </param>
            <param name="samples">
            The number of samples in the multisample texture's image. 
            </param>
            <param name="internalformat">
            The internal format to be used to store the multisample texture's image. 
            internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format. 
            </param>
            <param name="width">
            The width of the multisample texture's image, in texels. 
            </param>
            <param name="height">
            The height of the multisample texture's image, in texels. 
            </param>
            <param name="depth">
            The depth of the multisample texture's image, in texels. 
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image,
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexStorage1D(System.UInt32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a one-dimensional texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for glTexStorage1D.
            Must be one of GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D. 
            </param>
            <param name="levels">
            Specifies the texture object name for glTextureStorage1D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexStorage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for glTexStorage2D.
            Must be one of GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D,
            GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, or GL_PROXY_TEXTURE_CUBE_MAP. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexStorage3D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a three-dimensional, 
            two-dimensional array or cube-map array texture
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for glTexStorage3D. 
            Must be one of GL_TEXTURE_3D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_MAP_ARRAY, GL_PROXY_TEXTURE_3D, 
            GL_PROXY_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_CUBE_MAP_ARRAY. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
            <param name="depth">
            Specifies the depth of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexStorage2DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for glTexStorage2DMultisample. 
            Must be one of GL_TEXTURE_2D_MULTISAMPLE or GL_PROXY_TEXTURE_2D_MULTISAMPLE. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image,
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTexStorage3DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample array texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for glTexStorage3DMultisample. 
            Must be one of GL_TEXTURE_2D_MULTISAMPLE_ARRAY or GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels.
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
            <param name="depth">
            Specifies the depth of the texture, in layers. 
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, 
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glTextureView(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            initialize a texture as a data alias of another texture's data store.
            </summary>
            <param name="texture">
            Specifies the texture object to be initialized as a view. 
            </param>
            <param name="target">
            Specifies the target to be used for the newly initialized texture. 
            </param>
            <param name="origtexture">
            Specifies the name of a texture object of which to make a view. 
            </param>
            <param name="internalformat">
            Specifies the internal format for the newly created view. 
            </param>
            <param name="minlevel">
            Specifies lowest level of detail of the view. 
            </param>
            <param name="numlevels">
             Specifies the number of levels of detail to include in the view.
            </param>
            <param name="minlayer">
            Specifies the index of the first layer to include in the view. 
            </param>
            <param name="numlayers">
            Specifies the number of layers to include in the view. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryObjecti(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
             Specifies the symbolic name of a query object parameter.
             Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </param>
            <param name="Params">
            If a buffer is bound to the GL_QUERY_RESULT_BUFFER target,
            then params is treated as an offset to a location within that buffer's data store to receive the result of the query. 
            If no buffer is bound to GL_QUERY_RESULT_BUFFER, 
            then params is treated as an address in client memory of a variable to receive the resulting data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryObject(System.UInt32,System.UInt32,System.UInt64[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
             Specifies the symbolic name of a query object parameter.
             Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </param>
            <param name="Params">
            If a buffer is bound to the GL_QUERY_RESULT_BUFFER target,
            then params is treated as an offset to a location within that buffer's data store to receive the result of the query. 
            If no buffer is bound to GL_QUERY_RESULT_BUFFER, 
            then params is treated as an address in client memory of a variable to receive the resulting data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glQueryCounter(System.UInt32,System.UInt32)">
            <summary>
            record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            </summary>
            <param name="id">
            Specify the name of a query object into which to record the GL time.
            </param>
            <param name="target">
            Specify the counter to query. target must be GL_TIMESTAMP. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindTransformFeedback(System.UInt32,System.UInt32)">
            <summary>
            bind a transform feedback object.
            </summary>
            <param name="target">
            Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK. 
            </param>
            <param name="id">
            Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteTransformFeedbacks(System.Int32,System.UInt32[])">
            <summary>
            delete transform feedback objects.
            </summary>
            <param name="n">
            Specifies the number of transform feedback objects to delete. 
            </param>
            <param name="ids">
            Specifies an array of names of transform feedback objects to delete. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawTransformFeedback(System.UInt32,System.UInt32)">
            <summary>
            render primitives using a count derived from a transform feedback object.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY,
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY,
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="id">
            Specifies the name of a transform feedback object from which to retrieve a primitive count. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenTransformFeedbacks(System.Int32,System.UInt32[])">
            <summary>
            reserve transform feedback object names.
            </summary>
            <param name="n">
            Specifies the number of transform feedback object names to reserve. 
            </param>
            <param name="ids">
            Specifies an array of into which the reserved names will be written. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsTransformFeedback(System.UInt32)">
            <summary>
            determine if a name corresponds to a transform feedback object.
            </summary>
            <param name="id">
            Specifies a value that may be the name of a transform feedback object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glPauseTransformFeedback">
            <summary>
            pause transform feedback operations.
            </summary>
        </member>
        <member name="M:OpenGL.GL.glResumeTransformFeedback">
            <summary>
            resume transform feedback operations
            </summary>
        </member>
        <member name="M:OpenGL.GL.glBeginQueryIndexed(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            delimit the boundaries of a query object on an indexed target
            </summary>
            <param name="target">
            Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. 
            The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_PRIMITIVES_GENERATED, 
            GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED. 
            </param>
            <param name="index">
            Specifies the index of the query target upon which to begin the query. 
            </param>
            <param name="id">
            Specifies the name of a query object. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDrawTransformFeedbackStream(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            render primitives using a count derived from a specifed stream of a transform feedback object.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render.
            
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="id">
            Specifies the name of a transform feedback object from which to retrieve a primitive count. 
            </param>
            <param name="stream">
            Specifies the index of the transform feedback stream from which to retrieve a primitive count. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glEndQueryIndexed(System.UInt32,System.UInt32)">
            <summary>
            delimit the boundaries of a query object on an indexed target
            </summary>
            <param name="target">
            Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. 
            The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_PRIMITIVES_GENERATED, 
            GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED. 
            </param>
            <param name="index">
            Specifies the index of the query target upon which to begin the query. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetQueryIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of an indexed query object target.
            </summary>
            <param name="target">
            Specifies a query object target.
            Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED,
            GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP. 
            </param>
            <param name="index">
            Specifies the index of the query object target. 
            </param>
            <param name="pname">
            Specifies the index of the query object target. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindBufferBase(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            bind a buffer object to an indexed buffer target
            </summary>
            <param name="target">
            Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, 
            GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER. 
            </param>
            <param name="index">
            Specify the index of the first binding point within the array specified by target. 
            </param>
            <param name="buffer">
            The name of a buffer object to bind to the specified binding point. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            bind a range within a buffer object to an indexed buffer target.
            </summary>
            <param name="target">
            Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, 
            GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
            </param>
            <param name="index">
            Specify the index of the binding point within the array specified by target. 
            </param>
            <param name="buffer">
            The name of a buffer object to bind to the specified binding point. 
            </param>
            <param name="offset">
            The starting offset in basic machine units into the buffer object buffer. 
            </param>
            <param name="size">
            The amount of data in machine units that can be read from the buffer object while used as an indexed target.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveUniformBlockName(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            retrieve the name of an active uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing the uniform block. 
            </param>
            <param name="uniformBlockIndex">
            Specifies the index of the uniform block within program. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer addressed by uniformBlockName. 
            </param>
            <param name="length">
            Specifies the address of a variable to receive the number of characters that were written to uniformBlockName. 
            </param>
            <param name="uniformBlockName">
            Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveUniformBlock(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query information about an active uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing the uniform block. 
            </param>
            <param name="uniformBlockIndex">
            Specifies the index of the uniform block within program.
            </param>
            <param name="pname">
            Specifies the name of the parameter to query.
            </param>
            <param name="Params">
            Specifies the address of a variable to receive the result of the query. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveUniformName(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an active uniform.
            </summary>
            <param name="program">
            Specifies the program containing the active uniform index uniformIndex. 
            </param>
            <param name="uniformIndex">
            Specifies the index of the active uniform whose name to query. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
            </param>
            <param name="length">
            Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName. 
            </param>
            <param name="uniformName">
            Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetActiveUniforms(System.UInt32,System.Int32,System.UInt32[],System.UInt32,System.Int32[])">
            <summary>
            Returns information about several active uniform variables for the specified program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="uniformCount">
            Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
            </param>
            <param name="uniformIndices">
            Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
            </param>
            <param name="pname">
            Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
            </param>
            <param name="Params">
            Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetInteger(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="target">
            Specifies the parameter value to be returned for indexed versions of glGet. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetUniformBlockIndex(System.UInt32,System.Byte[])">
            <summary>
            retrieve the index of a named uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing the uniform block. 
            </param>
            <param name="uniformBlockName">
            Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetUniformIndices(System.UInt32,System.Int32,System.IntPtr[],System.UInt32[])">
            <summary>
            retrieve the index of a named uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing uniforms whose indices to query. 
            </param>
            <param name="uniformCount">
             Specifies the number of uniforms whose indices to query.
            </param>
            <param name="uniformNames">
            Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
            </param>
            <param name="uniformIndices">
            Specifies the address of an array that will receive the indices of the uniforms. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glUniformBlockBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            assign a binding point to an active uniform block.
            </summary>
            <param name="program">
            The name of a program object containing the active uniform block whose binding to assign. 
            </param>
            <param name="uniformBlockIndex">
            The index of the active uniform block within program whose binding to assign. 
            </param>
            <param name="uniformBlockBinding">
            Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindVertexArray(System.UInt32)">
            <summary>
            bind a vertex array object.
            </summary>
            <param name="array">
            Specifies the name of the vertex array to bind. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeleteVertexArrays(System.Int32,System.UInt32[])">
            <summary>
            delete vertex array objects.
            </summary>
            <param name="n">
            Specifies the number of vertex array objects to be deleted. 
            </param>
            <param name="arrays">
            Specifies the address of an array containing the n names of the objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenVertexArrays(System.Int32,System.UInt32[])">
            <summary>
            generate vertex array object names.
            </summary>
            <param name="n">
            Specifies the number of vertex array object names to generate.
            </param>
            <param name="arrays">
            Specifies an array in which the generated vertex array object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glIsVertexArray(System.UInt32)">
            <summary>
            determine if a name corresponds to a vertex array object.
            </summary>
            <param name="array">
            Specifies a value that may be the name of a vertex array object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.GL.glGetVertexAttribL(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            Specifies the symbolic name of the vertex attribute parameter to be queried. 
            Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, 
            GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, 
            GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL1(System.UInt32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL1(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL2d(System.UInt32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL2(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="z">
             For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL3(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="z">
             For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribL4(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribLPointer(System.UInt32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of generic vertex attribute data.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="size">
            Specifies the number of components per generic vertex attribute. 
            Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer. 
            The initial value is 4.
            </param>
            <param name="type">
            Specifies the data type of each component in the array.
            The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT,
            and GL_UNSIGNED_INT are accepted by glVertexAttribPointer and glVertexAttribIPointer.
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive generic vertex attributes. 
            If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. 
            The initial value is 0.
            </param>
            <param name="pointer">
            Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target.
            The initial value is 0.
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindVertexBuffer(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            bind a buffer to a vertex buffer bind point.
            </summary>
            <param name="bindingindex">
            The index of the vertex buffer binding point to which to bind the buffer.
            </param>
            <param name="buffer">
            The name of a buffer to bind to the vertex buffer binding point.
            </param>
            <param name="offset">
            The offset of the first element of the buffer.
            </param>
            <param name="stride">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayBindVertexBuffer(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vaobj">
            
            </param>
            <param name="bindingindex">
            
            </param>
            <param name="buffer">
            
            </param>
            <param name="offset">
            
            </param>
            <param name="stride">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayVertexAttribBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="vaobj"></param>
            <param name="attribindex"></param>
            <param name="bindingindex"></param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayVertexAttribFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            
            </summary>
            <param name="vaobj"></param>
            <param name="attribindex"></param>
            <param name="size"></param>
            <param name="type"></param>
            <param name="normalized"></param>
            <param name="relativeoffset"></param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayVertexAttribIFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="vaobj"></param>
            <param name="attribindex"></param>
            <param name="size"></param>
            <param name="type"></param>
            <param name="relativeoffset"></param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayVertexAttribLFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="vaobj"></param>
            <param name="attribindex"></param>
            <param name="size"></param>
            <param name="type"></param>
            <param name="relativeoffset"></param>
        </member>
        <member name="M:OpenGL.GL.glVertexArrayVertexBindingDivisor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="vaobj"></param>
            <param name="bindingindex"></param>
            <param name="divisor"></param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribBinding(System.UInt32,System.UInt32)">
            <summary>
            associate a vertex attribute and a vertex buffer binding for a vertex array object.
            </summary>
            <param name="attribindex">
            Specifies the name of the vertex array object for glVertexArrayAttribBinding. 
            </param>
            <param name="bindingindex">
            The index of the vertex buffer binding with which to associate the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribFormat(System.UInt32,System.Int32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="normalized">
            Specifies whether fixed-point data values should be normalized (GL_TRUE) 
            or converted directly as fixed-point values (GL_FALSE) when they are accessed. T
            his parameter is ignored if type is GL_FIXED. 
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribIFormat(System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexAttribLFormat(System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.GL.glVertexBindingDivisor(System.UInt32,System.UInt32)">
            <summary>
            modify the rate at which generic vertex attributes advance.
            </summary>
            <param name="bindingindex">
            The index of the binding whose divisor to modify.
            </param>
            <param name="divisor">
            The new value for the instance step rate to apply.
            </param>
        </member>
        <member name="M:OpenGL.GL.glDepthRangeArray(System.UInt32,System.Int32,System.Double[])">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            </summary>
            <param name="first">
            Specifies the index of the first viewport whose depth range to update. 
            </param>
            <param name="count">
            Specifies the number of viewports whose depth range to update. 
            </param>
            <param name="v">
            Specifies the address of an array containing the near and far values for the depth range of each modified viewport. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glDepthRangeIndexed(System.UInt32,System.Double,System.Double)">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport.
            </summary>
            <param name="index">
            Specifies the index of the viewport whose depth range to update. 
            </param>
            <param name="n">
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. 
            </param>
            <param name="f">
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetDouble(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="target">
            Specifies the parameter value to be returned for indexed versions of glGet. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glGetFloat(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="target">
            Specifies the parameter value to be returned for indexed versions of glGet. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glScissorArray(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            define the scissor box for multiple viewports.
            </summary>
            <param name="first">
            Specifies the index of the first viewport whose scissor box to modify. 
            </param>
            <param name="count">
            Specifies the number of scissor boxes to modify. 
            </param>
            <param name="v">
            Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glScissorIndexed(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            define the scissor box for a specific viewport.
            </summary>
            <param name="index">
            Specifies the index of the viewport whose scissor box to modify. 
            </param>
            <param name="left">
            Specify the coordinate of the bottom left corner of the scissor box, in pixels. 
            </param>
            <param name="bottom">
            Specify the coordinate of the bottom left corner of the scissor box, in pixels. 
            </param>
            <param name="width">
            Specify ths dimensions of the scissor box, in pixels. 
            </param>
            <param name="height">
            Specify ths dimensions of the scissor box, in pixels. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glScissorIndexed(System.UInt32,System.Int32[])">
            <summary>
            define the scissor box for a specific viewport.
            </summary>
            <param name="index">
            Specifies the index of the viewport whose scissor box to modify. 
            </param>
            <param name="v">
            For glScissorIndexedv, specifies the address of an array containing the left, 
            bottom, width and height of each scissor box, in that order. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glViewportArray(System.UInt32,System.Int32,System.Single[])">
            <summary>
            set multiple viewports.
            </summary>
            <param name="first">
            Specify the first viewport to set. 
            </param>
            <param name="count">
            Specify the number of viewports to set. 
            </param>
            <param name="v">
            Specify the address of an array containing the viewport parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glViewportIndexed(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set a specified viewport.
            </summary>
            <param name="index">
            Specify the first viewport to set. 
            </param>
            <param name="x">
            For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. 
            The initial value is (0,0). 
            </param>
            <param name="y">
            For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. 
            The initial value is (0,0). 
            </param>
            <param name="w">
            For glViewportIndexedf, specifies the width and height of the viewport. 
            When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
            <param name="h">
            For glViewportIndexedf, specifies the width and height of the viewport. 
            When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glViewportIndexed(System.UInt32,System.Single[])">
            <summary>
            set a specified viewport.
            </summary> 
            <param name="index">
            Specify the first viewport to set. 
            </param>
            <param name="v">
            For glViewportIndexedfv, specifies the address of an array containing the viewport parameters. 
            </param>
        </member>
        <member name="M:OpenGL.GL.glBindProgram(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="target">
            
            </param>
            <param name="program">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glDeletePrograms(System.Int32,System.UInt32[])">
            <summary>
            
            </summary>
            <param name="n">
            
            </param>
            <param name="programs">
            
            </param>
        </member>
        <member name="M:OpenGL.GL.glGenPrograms(System.Int32,System.UInt32[])">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="programs"></param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramEnvParameter(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramEnvParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramLocalParameter(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramLocalParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glGetProgramString(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="pname"></param>
            <param name="str"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramEnvParameter4(System.UInt32,System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramEnvParameter4(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramEnvParameter4(System.UInt32,System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramEnvParameter4(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramLocalParameter4(System.UInt32,System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramLocalParameter4(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramLocalParameter4(System.UInt32,System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramLocalParameter4(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="Params"></param>
        </member>
        <member name="M:OpenGL.GL.glProgramString(System.UInt32,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="format"></param>
            <param name="len"></param>
            <param name="str"></param>
        </member>
    </members>
</doc>
